{"ast":null,"code":"const WritableConsumableStream = require('writable-consumable-stream');\nconst DemuxedConsumableStream = require('./demuxed-consumable-stream');\nclass StreamDemux {\n  constructor() {\n    this.streams = {};\n    this._nextConsumerId = 1;\n    this.generateConsumerId = () => {\n      return this._nextConsumerId++;\n    };\n  }\n  write(streamName, value) {\n    if (this.streams[streamName]) {\n      this.streams[streamName].write(value);\n    }\n  }\n  close(streamName, value) {\n    if (this.streams[streamName]) {\n      this.streams[streamName].close(value);\n    }\n  }\n  closeAll(value) {\n    for (let stream of Object.values(this.streams)) {\n      stream.close(value);\n    }\n  }\n  writeToConsumer(consumerId, value) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.writeToConsumer(consumerId, value);\n      }\n    }\n  }\n  closeConsumer(consumerId, value) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.closeConsumer(consumerId, value);\n      }\n    }\n  }\n  getConsumerStats(consumerId) {\n    for (let [streamName, stream] of Object.entries(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return {\n          ...stream.getConsumerStats(consumerId),\n          stream: streamName\n        };\n      }\n    }\n    return undefined;\n  }\n  getConsumerStatsList(streamName) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].getConsumerStatsList().map(stats => {\n        return {\n          ...stats,\n          stream: streamName\n        };\n      });\n    }\n    return [];\n  }\n  getConsumerStatsListAll() {\n    let allStatsList = [];\n    for (let streamName of Object.keys(this.streams)) {\n      let statsList = this.getConsumerStatsList(streamName);\n      for (let stats of statsList) {\n        allStatsList.push(stats);\n      }\n    }\n    return allStatsList;\n  }\n  kill(streamName, value) {\n    if (this.streams[streamName]) {\n      this.streams[streamName].kill(value);\n    }\n  }\n  killAll(value) {\n    for (let stream of Object.values(this.streams)) {\n      stream.kill(value);\n    }\n  }\n  killConsumer(consumerId, value) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.killConsumer(consumerId, value);\n      }\n    }\n  }\n  getBackpressure(streamName) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].getBackpressure();\n    }\n    return 0;\n  }\n  getBackpressureAll() {\n    return Object.values(this.streams).reduce((max, stream) => Math.max(max, stream.getBackpressure()), 0);\n  }\n  getConsumerBackpressure(consumerId) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.getConsumerBackpressure(consumerId);\n      }\n    }\n    return 0;\n  }\n  hasConsumer(streamName, consumerId) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].hasConsumer(consumerId);\n    }\n    return false;\n  }\n  hasConsumerAll(consumerId) {\n    return Object.values(this.streams).some(stream => stream.hasConsumer(consumerId));\n  }\n  getConsumerCount(streamName) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].getConsumerCount();\n    }\n    return 0;\n  }\n  getConsumerCountAll() {\n    return Object.values(this.streams).reduce((sum, stream) => sum + stream.getConsumerCount(), 0);\n  }\n  createConsumer(streamName, timeout) {\n    if (!this.streams[streamName]) {\n      this.streams[streamName] = new WritableConsumableStream({\n        generateConsumerId: this.generateConsumerId,\n        removeConsumerCallback: () => {\n          if (!this.getConsumerCount(streamName)) {\n            delete this.streams[streamName];\n          }\n        }\n      });\n    }\n    return this.streams[streamName].createConsumer(timeout);\n  }\n\n  // Unlike individual consumers, consumable streams support being iterated\n  // over by multiple for-await-of loops in parallel.\n  stream(streamName) {\n    return new DemuxedConsumableStream(this, streamName);\n  }\n  unstream(streamName) {\n    delete this.streams[streamName];\n  }\n}\nmodule.exports = StreamDemux;","map":{"version":3,"names":["WritableConsumableStream","require","DemuxedConsumableStream","StreamDemux","constructor","streams","_nextConsumerId","generateConsumerId","write","streamName","value","close","closeAll","stream","Object","values","writeToConsumer","consumerId","hasConsumer","closeConsumer","getConsumerStats","entries","undefined","getConsumerStatsList","map","stats","getConsumerStatsListAll","allStatsList","keys","statsList","push","kill","killAll","killConsumer","getBackpressure","getBackpressureAll","reduce","max","Math","getConsumerBackpressure","hasConsumerAll","some","getConsumerCount","getConsumerCountAll","sum","createConsumer","timeout","removeConsumerCallback","unstream","module","exports"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/node_modules/stream-demux/index.js"],"sourcesContent":["const WritableConsumableStream = require('writable-consumable-stream');\nconst DemuxedConsumableStream = require('./demuxed-consumable-stream');\n\nclass StreamDemux {\n  constructor() {\n    this.streams = {};\n    this._nextConsumerId = 1;\n    this.generateConsumerId = () => {\n      return this._nextConsumerId++;\n    };\n  }\n\n  write(streamName, value) {\n    if (this.streams[streamName]) {\n      this.streams[streamName].write(value);\n    }\n  }\n\n  close(streamName, value) {\n    if (this.streams[streamName]) {\n      this.streams[streamName].close(value);\n    }\n  }\n\n  closeAll(value) {\n    for (let stream of Object.values(this.streams)) {\n      stream.close(value);\n    }\n  }\n\n  writeToConsumer(consumerId, value) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.writeToConsumer(consumerId, value);\n      }\n    }\n  }\n\n  closeConsumer(consumerId, value) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.closeConsumer(consumerId, value);\n      }\n    }\n  }\n\n  getConsumerStats(consumerId) {\n    for (let [streamName, stream] of Object.entries(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return {\n          ...stream.getConsumerStats(consumerId),\n          stream: streamName\n        };\n      }\n    }\n    return undefined;\n  }\n\n  getConsumerStatsList(streamName) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName]\n        .getConsumerStatsList()\n        .map(\n          (stats) => {\n            return {\n              ...stats,\n              stream: streamName\n            };\n          }\n        );\n    }\n    return [];\n  }\n\n  getConsumerStatsListAll() {\n    let allStatsList = [];\n    for (let streamName of Object.keys(this.streams)) {\n      let statsList = this.getConsumerStatsList(streamName);\n      for (let stats of statsList) {\n        allStatsList.push(stats);\n      }\n    }\n    return allStatsList;\n  }\n\n  kill(streamName, value) {\n    if (this.streams[streamName]) {\n      this.streams[streamName].kill(value);\n    }\n  }\n\n  killAll(value) {\n    for (let stream of Object.values(this.streams)) {\n      stream.kill(value);\n    }\n  }\n\n  killConsumer(consumerId, value) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.killConsumer(consumerId, value);\n      }\n    }\n  }\n\n  getBackpressure(streamName) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].getBackpressure();\n    }\n    return 0;\n  }\n\n  getBackpressureAll() {\n    return Object.values(this.streams).reduce(\n      (max, stream) => Math.max(max, stream.getBackpressure()),\n      0\n    );\n  }\n\n  getConsumerBackpressure(consumerId) {\n    for (let stream of Object.values(this.streams)) {\n      if (stream.hasConsumer(consumerId)) {\n        return stream.getConsumerBackpressure(consumerId);\n      }\n    }\n    return 0;\n  }\n\n  hasConsumer(streamName, consumerId) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].hasConsumer(consumerId);\n    }\n    return false;\n  }\n\n  hasConsumerAll(consumerId) {\n    return Object.values(this.streams).some(stream => stream.hasConsumer(consumerId));\n  }\n\n  getConsumerCount(streamName) {\n    if (this.streams[streamName]) {\n      return this.streams[streamName].getConsumerCount();\n    }\n    return 0;\n  }\n\n  getConsumerCountAll() {\n    return Object.values(this.streams).reduce(\n      (sum, stream) => sum + stream.getConsumerCount(),\n      0\n    );\n  }\n\n  createConsumer(streamName, timeout) {\n    if (!this.streams[streamName]) {\n      this.streams[streamName] = new WritableConsumableStream({\n        generateConsumerId: this.generateConsumerId,\n        removeConsumerCallback: () => {\n          if (!this.getConsumerCount(streamName)) {\n            delete this.streams[streamName];\n          }\n        }\n      });\n    }\n    return this.streams[streamName].createConsumer(timeout);\n  }\n\n  // Unlike individual consumers, consumable streams support being iterated\n  // over by multiple for-await-of loops in parallel.\n  stream(streamName) {\n    return new DemuxedConsumableStream(this, streamName);\n  }\n\n  unstream(streamName) {\n    delete this.streams[streamName];\n  }\n}\n\nmodule.exports = StreamDemux;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}