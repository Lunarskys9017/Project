{"ast":null,"code":"const AGClientSocket = require('./clientsocket');\nconst uuid = require('uuid');\nconst scErrors = require('sc-errors');\nconst InvalidArgumentsError = scErrors.InvalidArgumentsError;\nfunction isUrlSecure() {\n  return typeof location !== 'undefined' && location.protocol === 'https:';\n}\nfunction getPort(options, isSecureDefault) {\n  let isSecure = options.secure == null ? isSecureDefault : options.secure;\n  return options.port || (typeof location !== 'undefined' && location.port ? location.port : isSecure ? 443 : 80);\n}\nfunction create(options) {\n  options = options || {};\n  if (options.host && !options.host.match(/[^:]+:\\d{2,5}/)) {\n    throw new InvalidArgumentsError('The host option should include both' + ' the hostname and the port number in the hostname:port format');\n  }\n  if (options.host && options.hostname) {\n    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the hostname:port format' + ' - Because of this, you should never use host and hostname options together');\n  }\n  if (options.host && options.port) {\n    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the hostname:port format' + ' - Because of this, you should never use host and port options together');\n  }\n  let isSecureDefault = isUrlSecure();\n  let opts = {\n    clientId: uuid.v4(),\n    port: getPort(options, isSecureDefault),\n    hostname: typeof location !== 'undefined' && location.hostname || 'localhost',\n    secure: isSecureDefault\n  };\n  Object.assign(opts, options);\n  return new AGClientSocket(opts);\n}\nmodule.exports = {\n  create\n};","map":{"version":3,"names":["AGClientSocket","require","uuid","scErrors","InvalidArgumentsError","isUrlSecure","location","protocol","getPort","options","isSecureDefault","isSecure","secure","port","create","host","match","hostname","opts","clientId","v4","Object","assign","module","exports"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/node_modules/socketcluster-client/lib/factory.js"],"sourcesContent":["const AGClientSocket = require('./clientsocket');\r\nconst uuid = require('uuid');\r\nconst scErrors = require('sc-errors');\r\nconst InvalidArgumentsError = scErrors.InvalidArgumentsError;\r\n\r\nfunction isUrlSecure() {\r\n  return typeof location !== 'undefined' && location.protocol === 'https:';\r\n}\r\n\r\nfunction getPort(options, isSecureDefault) {\r\n  let isSecure = options.secure == null ? isSecureDefault : options.secure;\r\n  return options.port || (typeof location !== 'undefined' && location.port ? location.port : isSecure ? 443 : 80);\r\n}\r\n\r\nfunction create(options) {\r\n  options = options || {};\r\n\r\n  if (options.host && !options.host.match(/[^:]+:\\d{2,5}/)) {\r\n    throw new InvalidArgumentsError(\r\n      'The host option should include both' +\r\n      ' the hostname and the port number in the hostname:port format'\r\n    );\r\n  }\r\n\r\n  if (options.host && options.hostname) {\r\n    throw new InvalidArgumentsError(\r\n      'The host option should already include' +\r\n      ' the hostname and the port number in the hostname:port format' +\r\n      ' - Because of this, you should never use host and hostname options together'\r\n    );\r\n  }\r\n\r\n  if (options.host && options.port) {\r\n    throw new InvalidArgumentsError(\r\n      'The host option should already include' +\r\n      ' the hostname and the port number in the hostname:port format' +\r\n      ' - Because of this, you should never use host and port options together'\r\n    );\r\n  }\r\n\r\n  let isSecureDefault = isUrlSecure();\r\n\r\n  let opts = {\r\n    clientId: uuid.v4(),\r\n    port: getPort(options, isSecureDefault),\r\n    hostname: typeof location !== 'undefined' && location.hostname || 'localhost',\r\n    secure: isSecureDefault\r\n  };\r\n\r\n  Object.assign(opts, options);\r\n\r\n  return new AGClientSocket(opts);\r\n}\r\n\r\nmodule.exports = {\r\n  create\r\n};\r\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMG,qBAAqB,GAAGD,QAAQ,CAACC,qBAAqB;AAE5D,SAASC,WAAWA,CAAA,EAAG;EACrB,OAAO,OAAOC,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACC,QAAQ,KAAK,QAAQ;AAC1E;AAEA,SAASC,OAAOA,CAACC,OAAO,EAAEC,eAAe,EAAE;EACzC,IAAIC,QAAQ,GAAGF,OAAO,CAACG,MAAM,IAAI,IAAI,GAAGF,eAAe,GAAGD,OAAO,CAACG,MAAM;EACxE,OAAOH,OAAO,CAACI,IAAI,KAAK,OAAOP,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACO,IAAI,GAAGP,QAAQ,CAACO,IAAI,GAAGF,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC;AACjH;AAEA,SAASG,MAAMA,CAACL,OAAO,EAAE;EACvBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIA,OAAO,CAACM,IAAI,IAAI,CAACN,OAAO,CAACM,IAAI,CAACC,KAAK,CAAC,eAAe,CAAC,EAAE;IACxD,MAAM,IAAIZ,qBAAqB,CAC7B,qCAAqC,GACrC,+DACF,CAAC;EACH;EAEA,IAAIK,OAAO,CAACM,IAAI,IAAIN,OAAO,CAACQ,QAAQ,EAAE;IACpC,MAAM,IAAIb,qBAAqB,CAC7B,wCAAwC,GACxC,+DAA+D,GAC/D,6EACF,CAAC;EACH;EAEA,IAAIK,OAAO,CAACM,IAAI,IAAIN,OAAO,CAACI,IAAI,EAAE;IAChC,MAAM,IAAIT,qBAAqB,CAC7B,wCAAwC,GACxC,+DAA+D,GAC/D,yEACF,CAAC;EACH;EAEA,IAAIM,eAAe,GAAGL,WAAW,CAAC,CAAC;EAEnC,IAAIa,IAAI,GAAG;IACTC,QAAQ,EAAEjB,IAAI,CAACkB,EAAE,CAAC,CAAC;IACnBP,IAAI,EAAEL,OAAO,CAACC,OAAO,EAAEC,eAAe,CAAC;IACvCO,QAAQ,EAAE,OAAOX,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACW,QAAQ,IAAI,WAAW;IAC7EL,MAAM,EAAEF;EACV,CAAC;EAEDW,MAAM,CAACC,MAAM,CAACJ,IAAI,EAAET,OAAO,CAAC;EAE5B,OAAO,IAAIT,cAAc,CAACkB,IAAI,CAAC;AACjC;AAEAK,MAAM,CAACC,OAAO,GAAG;EACfV;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}