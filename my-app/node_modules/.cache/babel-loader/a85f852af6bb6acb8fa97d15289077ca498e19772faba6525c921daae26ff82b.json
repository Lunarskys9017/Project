{"ast":null,"code":"import { WINDOW_NAMES } from \"app/shared/constants\";\nimport { isDev } from \"./utils\";\nimport { log } from \"./log\";\nasync function obtainDeclaredWindow(windowName) {\n  return new Promise((resolve, reject) => {\n    overwolf.windows.obtainDeclaredWindow(windowName, result => {\n      if (result.success) {\n        resolve(result.window);\n      } else {\n        reject(result.error);\n      }\n    });\n  });\n}\nasync function getCurrentWindow() {\n  if (isDev) {\n    log(`Running in dev mode, returning ${WINDOW_NAMES.DESKTOP} window, you can change this in src/lib/overwolf-essentials.ts: getCurrent`, \"src/lib/overwolf-essentials.ts\", \"getCurrentWindow\");\n    return Promise.resolve(WINDOW_NAMES.DESKTOP);\n  }\n  return new Promise((resolve, reject) => {\n    overwolf.windows.getCurrentWindow(result => {\n      if (result.success) {\n        resolve(result.window.name);\n      } else {\n        reject(result.error);\n      }\n    });\n  });\n}\nfunction getMonitorsList() {\n  return new Promise(resolve => {\n    overwolf.utils.getMonitorsList(result => {\n      resolve(result.displays);\n    });\n  });\n}\nexport { obtainDeclaredWindow, getMonitorsList, getCurrentWindow };","map":{"version":3,"names":["WINDOW_NAMES","isDev","log","obtainDeclaredWindow","windowName","Promise","resolve","reject","overwolf","windows","result","success","window","error","getCurrentWindow","DESKTOP","name","getMonitorsList","utils","displays"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/lib/overwolf-essentials.ts"],"sourcesContent":["import { WINDOW_NAMES } from \"app/shared/constants\";\nimport { isDev } from \"./utils\";\nimport { log } from \"./log\";\n\nasync function obtainDeclaredWindow(\n  windowName: string,\n): Promise<overwolf.windows.WindowInfo> {\n  return new Promise((resolve, reject) => {\n    overwolf.windows.obtainDeclaredWindow(windowName, (result) => {\n      if (result.success) {\n        resolve(result.window);\n      } else {\n        reject(result.error);\n      }\n    });\n  });\n}\n\nasync function getCurrentWindow() {\n  if (isDev) {\n    log(\n      `Running in dev mode, returning ${WINDOW_NAMES.DESKTOP} window, you can change this in src/lib/overwolf-essentials.ts: getCurrent`,\n      \"src/lib/overwolf-essentials.ts\",\n      \"getCurrentWindow\",\n    );\n    return Promise.resolve(WINDOW_NAMES.DESKTOP);\n  }\n  return new Promise<string>((resolve, reject) => {\n    overwolf.windows.getCurrentWindow((result) => {\n      if (result.success) {\n        resolve(result.window.name);\n      } else {\n        reject(result.error);\n      }\n    });\n  });\n}\n\nfunction getMonitorsList(): Promise<overwolf.utils.Display[]> {\n  return new Promise<overwolf.utils.Display[]>((resolve) => {\n    overwolf.utils.getMonitorsList((result) => {\n      resolve(result.displays);\n    });\n  });\n}\n\nexport { obtainDeclaredWindow, getMonitorsList, getCurrentWindow };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,sBAAsB;AACnD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,GAAG,QAAQ,OAAO;AAE3B,eAAeC,oBAAoBA,CACjCC,UAAkB,EACoB;EACtC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,QAAQ,CAACC,OAAO,CAACN,oBAAoB,CAACC,UAAU,EAAGM,MAAM,IAAK;MAC5D,IAAIA,MAAM,CAACC,OAAO,EAAE;QAClBL,OAAO,CAACI,MAAM,CAACE,MAAM,CAAC;MACxB,CAAC,MAAM;QACLL,MAAM,CAACG,MAAM,CAACG,KAAK,CAAC;MACtB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,eAAeC,gBAAgBA,CAAA,EAAG;EAChC,IAAIb,KAAK,EAAE;IACTC,GAAG,CACA,kCAAiCF,YAAY,CAACe,OAAQ,4EAA2E,EAClI,gCAAgC,EAChC,kBACF,CAAC;IACD,OAAOV,OAAO,CAACC,OAAO,CAACN,YAAY,CAACe,OAAO,CAAC;EAC9C;EACA,OAAO,IAAIV,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC9CC,QAAQ,CAACC,OAAO,CAACK,gBAAgB,CAAEJ,MAAM,IAAK;MAC5C,IAAIA,MAAM,CAACC,OAAO,EAAE;QAClBL,OAAO,CAACI,MAAM,CAACE,MAAM,CAACI,IAAI,CAAC;MAC7B,CAAC,MAAM;QACLT,MAAM,CAACG,MAAM,CAACG,KAAK,CAAC;MACtB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASI,eAAeA,CAAA,EAAsC;EAC5D,OAAO,IAAIZ,OAAO,CAA4BC,OAAO,IAAK;IACxDE,QAAQ,CAACU,KAAK,CAACD,eAAe,CAAEP,MAAM,IAAK;MACzCJ,OAAO,CAACI,MAAM,CAACS,QAAQ,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAAShB,oBAAoB,EAAEc,eAAe,EAAEH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}