{"ast":null,"code":"import\"./overwolf.dev.mock\";import store from\"app/shared/store\";import i18next from\"i18next\";import{resources}from\"locales\";import{createRoot}from\"react-dom/client\";import{initReactI18next}from\"react-i18next\";import{Provider}from\"react-redux\";import{App}from\"./app/components/App\";import reportWebVitals from\"./reportWebVitals\";import{jsx as _jsx}from\"react/jsx-runtime\";const container=document.getElementById(\"root\");const root=createRoot(container);const OverwolfApp=()=>/*#__PURE__*/_jsx(Provider,{store:store,children:/*#__PURE__*/_jsx(App,{})});/*\n * before render app, get overwolf language\n * then load resources, default to en if not detected\n * @see  https://overwolf.github.io/docs/api/overwolf-settings-language\n */overwolf.settings.language.get(_ref=>{let{language}=_ref;i18next.use(initReactI18next).init({resources,lng:language,fallbackLng:\"en\",interpolation:{escapeValue:false}},()=>{root.render(/*#__PURE__*/_jsx(OverwolfApp,{}));});});// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();// detect change overwolf language and set i18next language\n// then load resources\nconst changeLanguage=_ref2=>{let{language}=_ref2;return i18next.changeLanguage(language);};overwolf.settings.language.onLanguageChanged.removeListener(changeLanguage);overwolf.settings.language.onLanguageChanged.addListener(changeLanguage);","map":{"version":3,"names":["store","i18next","resources","createRoot","initReactI18next","Provider","App","reportWebVitals","jsx","_jsx","container","document","getElementById","root","OverwolfApp","children","overwolf","settings","language","get","_ref","use","init","lng","fallbackLng","interpolation","escapeValue","render","changeLanguage","_ref2","onLanguageChanged","removeListener","addListener"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/index.tsx"],"sourcesContent":["import \"./overwolf.dev.mock\";\nimport store from \"app/shared/store\";\nimport i18next from \"i18next\";\nimport { resources } from \"locales\";\nimport { createRoot } from \"react-dom/client\";\nimport { initReactI18next } from \"react-i18next\";\nimport { Provider } from \"react-redux\";\nimport { App } from \"./app/components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\n\nconst OverwolfApp = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n/*\n * before render app, get overwolf language\n * then load resources, default to en if not detected\n * @see  https://overwolf.github.io/docs/api/overwolf-settings-language\n */\noverwolf.settings.language.get(({ language }) => {\n  i18next.use(initReactI18next).init(\n    {\n      resources,\n      lng: language,\n      fallbackLng: \"en\",\n      interpolation: {\n        escapeValue: false,\n      },\n    },\n    () => {\n      root.render(<OverwolfApp />);\n    },\n  );\n});\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// detect change overwolf language and set i18next language\n// then load resources\nconst changeLanguage = ({\n  language,\n}: overwolf.settings.language.LanguageChangedEvent) =>\n  i18next.changeLanguage(language);\n\noverwolf.settings.language.onLanguageChanged.removeListener(changeLanguage);\noverwolf.settings.language.onLanguageChanged.addListener(changeLanguage);\n"],"mappings":"AAAA,MAAO,qBAAqB,CAC5B,MAAO,CAAAA,KAAK,KAAM,kBAAkB,CACpC,MAAO,CAAAC,OAAO,KAAM,SAAS,CAC7B,OAASC,SAAS,KAAQ,SAAS,CACnC,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,gBAAgB,KAAQ,eAAe,CAChD,OAASC,QAAQ,KAAQ,aAAa,CACtC,OAASC,GAAG,KAAQ,sBAAsB,CAC1C,MAAO,CAAAC,eAAe,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhD,KAAM,CAAAC,SAAS,CAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CACjD,KAAM,CAAAC,IAAI,CAAGV,UAAU,CAACO,SAAU,CAAC,CAEnC,KAAM,CAAAI,WAAW,CAAGA,CAAA,gBAClBL,IAAA,CAACJ,QAAQ,EAACL,KAAK,CAAEA,KAAM,CAAAe,QAAA,cACrBN,IAAA,CAACH,GAAG,GAAE,CAAC,CACC,CACX,CACD;AACA;AACA;AACA;AACA,GACAU,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAACC,IAAA,EAAkB,IAAjB,CAAEF,QAAS,CAAC,CAAAE,IAAA,CAC1CnB,OAAO,CAACoB,GAAG,CAACjB,gBAAgB,CAAC,CAACkB,IAAI,CAChC,CACEpB,SAAS,CACTqB,GAAG,CAAEL,QAAQ,CACbM,WAAW,CAAE,IAAI,CACjBC,aAAa,CAAE,CACbC,WAAW,CAAE,KACf,CACF,CAAC,CACD,IAAM,CACJb,IAAI,CAACc,MAAM,cAAClB,IAAA,CAACK,WAAW,GAAE,CAAC,CAAC,CAC9B,CACF,CAAC,CACH,CAAC,CAAC,CACF;AACA;AACA;AACAP,eAAe,CAAC,CAAC,CAEjB;AACA;AACA,KAAM,CAAAqB,cAAc,CAAGC,KAAA,MAAC,CACtBX,QAC+C,CAAC,CAAAW,KAAA,OAChD,CAAA5B,OAAO,CAAC2B,cAAc,CAACV,QAAQ,CAAC,GAElCF,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAACY,iBAAiB,CAACC,cAAc,CAACH,cAAc,CAAC,CAC3EZ,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAACY,iBAAiB,CAACE,WAAW,CAACJ,cAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}