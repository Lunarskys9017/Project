{"ast":null,"code":"/**\n * Pauses the execution for the specified number of milliseconds.\n * @param ms The number of milliseconds to sleep.\n * @example await sleep(1000);\n * @returns A promise that resolves after the specified delay.\n */const sleep=ms=>new Promise(resolve=>setTimeout(resolve,ms));/**\n * Combines multiple class names into a single string.\n * @param classes The class names to combine.\n * @example const className = classNames('foo', 'bar');\n * @returns A string containing the combined class names.\n */const classNames=function(){for(var _len=arguments.length,classes=new Array(_len),_key=0;_key<_len;_key++){classes[_key]=arguments[_key];}return classes.filter(Boolean).join(\" \");};/**\n * Formats a date input into a string representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const formattedDate = formatDate(Date.now());\n * @returns A formatted string representation of the date.\n */function formatDate(input){const date=new Date(input);return date.toLocaleDateString(\"en-US\",{month:\"short\",day:\"numeric\",year:\"numeric\"});}/**\n * Formats a date input into a relative time representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const relativeTime = fromNow(Date.now());\n * @returns A string representing the relative time from the input date.\n */function fromNow(input){const date=new Date(input);const now=new Date();const seconds=Math.floor((now.getTime()-date.getTime())/1000);const minutes=Math.floor(seconds/60);const hours=Math.floor(minutes/60);if(seconds<60){return\"now\";}else if(minutes<60){return\"\".concat(minutes,\"m\");}else if(hours<24){return\"\".concat(hours,\"h\");}else{return formatDate(input);}}/**\n * Generates a random number between the specified minimum and maximum values (inclusive).\n * @param min The minimum value of the range.\n * @param max The maximum value of the range.\n * @example const randomNumber = random(1, 10);\n * @returns A random number between the minimum and maximum values.\n */const random=(min,max)=>Math.floor(Math.random()*(max-min+1))+min;/**\n * Creates a throttled version of the provided function that limits the rate at which it can be called.\n * @param func The function to throttle.\n * @param delay The minimum delay (in milliseconds) between function invocations.\n * @example const throttled = throttle(() => console.log('Hello World!'), 1000);\n * @returns A throttled version of the function.\n */function throttle(func,delay){let lastCall=0;return function(){const now=Date.now();if(now-lastCall>=delay){func(...arguments);lastCall=now;}};}/**\n * Normalizes a name by encoding and decoding it using URI components.\n * @param name The name to normalize.\n * @example const name = normalizeName('Hello%20World!');\n * @returns The normalized name.\n */const normalizeName=name=>{try{const nameNormalize=decodeURIComponent(encodeURIComponent(name));return nameNormalize;}catch(error){// console.info(\"no formatting required [UTF8 or ISO]\");\nreturn name;}};/**\n * Safely parses a JSON string into a JavaScript object.\n * @param data The JSON string to parse.\n * @example const parsedJSON = parseSafeJSON<MyInterface>('{\"foo\":\"bar\"}');\n * @returns The parsed JavaScript object, or null if parsing fails.\n */const parseSafeJSON=function(){let data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";try{if(data===\"\")return null;// Return null for empty data\nreturn JSON.parse(data);}catch(error){console.error(\"Failed to parse JSON:\",JSON.stringify(error));return null;}};const isDev=process.env.NODE_ENV===\"development\";export{classNames,formatDate,random,throttle,normalizeName,parseSafeJSON,sleep,isDev,fromNow};","map":{"version":3,"names":["sleep","ms","Promise","resolve","setTimeout","classNames","_len","arguments","length","classes","Array","_key","filter","Boolean","join","formatDate","input","date","Date","toLocaleDateString","month","day","year","fromNow","now","seconds","Math","floor","getTime","minutes","hours","concat","random","min","max","throttle","func","delay","lastCall","normalizeName","name","nameNormalize","decodeURIComponent","encodeURIComponent","error","parseSafeJSON","data","undefined","JSON","parse","console","stringify","isDev","process","env","NODE_ENV"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/lib/utils.ts"],"sourcesContent":["/**\n * Pauses the execution for the specified number of milliseconds.\n * @param ms The number of milliseconds to sleep.\n * @example await sleep(1000);\n * @returns A promise that resolves after the specified delay.\n */\nconst sleep = (ms: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\n/**\n * Combines multiple class names into a single string.\n * @param classes The class names to combine.\n * @example const className = classNames('foo', 'bar');\n * @returns A string containing the combined class names.\n */\nconst classNames = (...classes: (string | undefined)[]) =>\n  classes.filter(Boolean).join(\" \");\n\n/**\n * Formats a date input into a string representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const formattedDate = formatDate(Date.now());\n * @returns A formatted string representation of the date.\n */\nfunction formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\n/**\n * Formats a date input into a relative time representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const relativeTime = fromNow(Date.now());\n * @returns A string representing the relative time from the input date.\n */\nfunction fromNow(input: string | number): string {\n  const date = new Date(input);\n  const now = new Date();\n  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  if (seconds < 60) {\n    return \"now\";\n  } else if (minutes < 60) {\n    return `${minutes}m`;\n  } else if (hours < 24) {\n    return `${hours}h`;\n  } else {\n    return formatDate(input);\n  }\n}\n\n/**\n * Generates a random number between the specified minimum and maximum values (inclusive).\n * @param min The minimum value of the range.\n * @param max The maximum value of the range.\n * @example const randomNumber = random(1, 10);\n * @returns A random number between the minimum and maximum values.\n */\nconst random = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\n/**\n * Creates a throttled version of the provided function that limits the rate at which it can be called.\n * @param func The function to throttle.\n * @param delay The minimum delay (in milliseconds) between function invocations.\n * @example const throttled = throttle(() => console.log('Hello World!'), 1000);\n * @returns A throttled version of the function.\n */\nfunction throttle<T extends (...args: unknown[]) => void>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  return function (...args: Parameters<T>) {\n    const now = Date.now();\n    if (now - lastCall >= delay) {\n      func(...args);\n      lastCall = now;\n    }\n  };\n}\n\n/**\n * Normalizes a name by encoding and decoding it using URI components.\n * @param name The name to normalize.\n * @example const name = normalizeName('Hello%20World!');\n * @returns The normalized name.\n */\nconst normalizeName = (name: string) => {\n  try {\n    const nameNormalize = decodeURIComponent(encodeURIComponent(name));\n    return nameNormalize;\n  } catch (error) {\n    // console.info(\"no formatting required [UTF8 or ISO]\");\n    return name;\n  }\n};\n\n/**\n * Safely parses a JSON string into a JavaScript object.\n * @param data The JSON string to parse.\n * @example const parsedJSON = parseSafeJSON<MyInterface>('{\"foo\":\"bar\"}');\n * @returns The parsed JavaScript object, or null if parsing fails.\n */\nconst parseSafeJSON = <T>(data: string = \"\"): T | null => {\n  try {\n    if (data === \"\") return null; // Return null for empty data\n    return JSON.parse(data) as T;\n  } catch (error) {\n    console.error(\"Failed to parse JSON:\", JSON.stringify(error));\n    return null;\n  }\n};\n\nconst isDev = process.env.NODE_ENV === \"development\";\n\nexport {\n  classNames,\n  formatDate,\n  random,\n  throttle,\n  normalizeName,\n  parseSafeJSON,\n  sleep,\n  isDev,\n  fromNow,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAA,KAAK,CAAIC,EAAU,EACvB,GAAI,CAAAC,OAAO,CAAEC,OAAO,EAAKC,UAAU,CAACD,OAAO,CAAEF,EAAE,CAAC,CAAC,CAEnD;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAI,UAAU,CAAG,QAAAA,CAAA,UAAAC,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAAIC,OAAO,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAPF,OAAO,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,SAC5B,CAAAF,OAAO,CAACG,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAEnC;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,UAAUA,CAACC,KAAsB,CAAU,CAClD,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,KAAK,CAAC,CAC5B,MAAO,CAAAC,IAAI,CAACE,kBAAkB,CAAC,OAAO,CAAE,CACtCC,KAAK,CAAE,OAAO,CACdC,GAAG,CAAE,SAAS,CACdC,IAAI,CAAE,SACR,CAAC,CAAC,CACJ,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,OAAOA,CAACP,KAAsB,CAAU,CAC/C,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,KAAK,CAAC,CAC5B,KAAM,CAAAQ,GAAG,CAAG,GAAI,CAAAN,IAAI,CAAC,CAAC,CACtB,KAAM,CAAAO,OAAO,CAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,CAAGX,IAAI,CAACW,OAAO,CAAC,CAAC,EAAI,IAAI,CAAC,CACnE,KAAM,CAAAC,OAAO,CAAGH,IAAI,CAACC,KAAK,CAACF,OAAO,CAAG,EAAE,CAAC,CACxC,KAAM,CAAAK,KAAK,CAAGJ,IAAI,CAACC,KAAK,CAACE,OAAO,CAAG,EAAE,CAAC,CAEtC,GAAIJ,OAAO,CAAG,EAAE,CAAE,CAChB,MAAO,KAAK,CACd,CAAC,IAAM,IAAII,OAAO,CAAG,EAAE,CAAE,CACvB,SAAAE,MAAA,CAAUF,OAAO,MACnB,CAAC,IAAM,IAAIC,KAAK,CAAG,EAAE,CAAE,CACrB,SAAAC,MAAA,CAAUD,KAAK,MACjB,CAAC,IAAM,CACL,MAAO,CAAAf,UAAU,CAACC,KAAK,CAAC,CAC1B,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAgB,MAAM,CAAGA,CAACC,GAAW,CAAEC,GAAW,GACtCR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACM,MAAM,CAAC,CAAC,EAAIE,GAAG,CAAGD,GAAG,CAAG,CAAC,CAAC,CAAC,CAAGA,GAAG,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAE,QAAQA,CACfC,IAAO,CACPC,KAAa,CACqB,CAClC,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAChB,MAAO,WAAkC,CACvC,KAAM,CAAAd,GAAG,CAAGN,IAAI,CAACM,GAAG,CAAC,CAAC,CACtB,GAAIA,GAAG,CAAGc,QAAQ,EAAID,KAAK,CAAE,CAC3BD,IAAI,CAAC,GAAA7B,SAAO,CAAC,CACb+B,QAAQ,CAAGd,GAAG,CAChB,CACF,CAAC,CACH,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAe,aAAa,CAAIC,IAAY,EAAK,CACtC,GAAI,CACF,KAAM,CAAAC,aAAa,CAAGC,kBAAkB,CAACC,kBAAkB,CAACH,IAAI,CAAC,CAAC,CAClE,MAAO,CAAAC,aAAa,CACtB,CAAE,MAAOG,KAAK,CAAE,CACd;AACA,MAAO,CAAAJ,IAAI,CACb,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAK,aAAa,CAAG,QAAAA,CAAA,CAAoC,IAAhC,CAAAC,IAAY,CAAAvC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAwC,SAAA,CAAAxC,SAAA,IAAG,EAAE,CACzC,GAAI,CACF,GAAIuC,IAAI,GAAK,EAAE,CAAE,MAAO,KAAI,CAAE;AAC9B,MAAO,CAAAE,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CACzB,CAAE,MAAOF,KAAK,CAAE,CACdM,OAAO,CAACN,KAAK,CAAC,uBAAuB,CAAEI,IAAI,CAACG,SAAS,CAACP,KAAK,CAAC,CAAC,CAC7D,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAQ,KAAK,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAEpD,OACElD,UAAU,CACVU,UAAU,CACViB,MAAM,CACNG,QAAQ,CACRI,aAAa,CACbM,aAAa,CACb7C,KAAK,CACLoD,KAAK,CACL7B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}