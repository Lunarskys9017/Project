{"ast":null,"code":"/**\n * Pauses the execution for the specified number of milliseconds.\n * @param ms The number of milliseconds to sleep.\n * @example await sleep(1000);\n * @returns A promise that resolves after the specified delay.\n */\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Combines multiple class names into a single string.\n * @param classes The class names to combine.\n * @example const className = classNames('foo', 'bar');\n * @returns A string containing the combined class names.\n */\nconst classNames = function () {\n  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n    classes[_key] = arguments[_key];\n  }\n  return classes.filter(Boolean).join(\" \");\n};\n\n/**\n * Formats a date input into a string representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const formattedDate = formatDate(Date.now());\n * @returns A formatted string representation of the date.\n */\nfunction formatDate(input) {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\"\n  });\n}\n\n/**\n * Formats a date input into a relative time representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const relativeTime = fromNow(Date.now());\n * @returns A string representing the relative time from the input date.\n */\nfunction fromNow(input) {\n  const date = new Date(input);\n  const now = new Date();\n  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  if (seconds < 60) {\n    return \"now\";\n  } else if (minutes < 60) {\n    return `${minutes}m`;\n  } else if (hours < 24) {\n    return `${hours}h`;\n  } else {\n    return formatDate(input);\n  }\n}\n\n/**\n * Generates a random number between the specified minimum and maximum values (inclusive).\n * @param min The minimum value of the range.\n * @param max The maximum value of the range.\n * @example const randomNumber = random(1, 10);\n * @returns A random number between the minimum and maximum values.\n */\nconst random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n/**\n * Creates a throttled version of the provided function that limits the rate at which it can be called.\n * @param func The function to throttle.\n * @param delay The minimum delay (in milliseconds) between function invocations.\n * @example const throttled = throttle(() => console.log('Hello World!'), 1000);\n * @returns A throttled version of the function.\n */\nfunction throttle(func, delay) {\n  let lastCall = 0;\n  return function () {\n    const now = Date.now();\n    if (now - lastCall >= delay) {\n      func(...arguments);\n      lastCall = now;\n    }\n  };\n}\n\n/**\n * Normalizes a name by encoding and decoding it using URI components.\n * @param name The name to normalize.\n * @example const name = normalizeName('Hello%20World!');\n * @returns The normalized name.\n */\nconst normalizeName = name => {\n  try {\n    const nameNormalize = decodeURIComponent(encodeURIComponent(name));\n    return nameNormalize;\n  } catch (error) {\n    // console.info(\"no formatting required [UTF8 or ISO]\");\n    return name;\n  }\n};\n\n/**\n * Safely parses a JSON string into a JavaScript object.\n * @param data The JSON string to parse.\n * @example const parsedJSON = parseSafeJSON<MyInterface>('{\"foo\":\"bar\"}');\n * @returns The parsed JavaScript object, or null if parsing fails.\n */\nconst parseSafeJSON = function () {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  try {\n    if (data === \"\") return null; // Return null for empty data\n    return JSON.parse(data);\n  } catch (error) {\n    console.error(\"Failed to parse JSON:\", JSON.stringify(error));\n    return null;\n  }\n};\nconst isDev = process.env.NODE_ENV === \"development\";\nexport { classNames, formatDate, random, throttle, normalizeName, parseSafeJSON, sleep, isDev, fromNow };","map":{"version":3,"names":["sleep","ms","Promise","resolve","setTimeout","classNames","_len","arguments","length","classes","Array","_key","filter","Boolean","join","formatDate","input","date","Date","toLocaleDateString","month","day","year","fromNow","now","seconds","Math","floor","getTime","minutes","hours","random","min","max","throttle","func","delay","lastCall","normalizeName","name","nameNormalize","decodeURIComponent","encodeURIComponent","error","parseSafeJSON","data","undefined","JSON","parse","console","stringify","isDev","process","env","NODE_ENV"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/lib/utils.ts"],"sourcesContent":["/**\n * Pauses the execution for the specified number of milliseconds.\n * @param ms The number of milliseconds to sleep.\n * @example await sleep(1000);\n * @returns A promise that resolves after the specified delay.\n */\nconst sleep = (ms: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\n/**\n * Combines multiple class names into a single string.\n * @param classes The class names to combine.\n * @example const className = classNames('foo', 'bar');\n * @returns A string containing the combined class names.\n */\nconst classNames = (...classes: (string | undefined)[]) =>\n  classes.filter(Boolean).join(\" \");\n\n/**\n * Formats a date input into a string representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const formattedDate = formatDate(Date.now());\n * @returns A formatted string representation of the date.\n */\nfunction formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\n/**\n * Formats a date input into a relative time representation.\n * @param input The date input to format. It can be a string or a number.\n * @example const relativeTime = fromNow(Date.now());\n * @returns A string representing the relative time from the input date.\n */\nfunction fromNow(input: string | number): string {\n  const date = new Date(input);\n  const now = new Date();\n  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  if (seconds < 60) {\n    return \"now\";\n  } else if (minutes < 60) {\n    return `${minutes}m`;\n  } else if (hours < 24) {\n    return `${hours}h`;\n  } else {\n    return formatDate(input);\n  }\n}\n\n/**\n * Generates a random number between the specified minimum and maximum values (inclusive).\n * @param min The minimum value of the range.\n * @param max The maximum value of the range.\n * @example const randomNumber = random(1, 10);\n * @returns A random number between the minimum and maximum values.\n */\nconst random = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\n/**\n * Creates a throttled version of the provided function that limits the rate at which it can be called.\n * @param func The function to throttle.\n * @param delay The minimum delay (in milliseconds) between function invocations.\n * @example const throttled = throttle(() => console.log('Hello World!'), 1000);\n * @returns A throttled version of the function.\n */\nfunction throttle<T extends (...args: unknown[]) => void>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  return function (...args: Parameters<T>) {\n    const now = Date.now();\n    if (now - lastCall >= delay) {\n      func(...args);\n      lastCall = now;\n    }\n  };\n}\n\n/**\n * Normalizes a name by encoding and decoding it using URI components.\n * @param name The name to normalize.\n * @example const name = normalizeName('Hello%20World!');\n * @returns The normalized name.\n */\nconst normalizeName = (name: string) => {\n  try {\n    const nameNormalize = decodeURIComponent(encodeURIComponent(name));\n    return nameNormalize;\n  } catch (error) {\n    // console.info(\"no formatting required [UTF8 or ISO]\");\n    return name;\n  }\n};\n\n/**\n * Safely parses a JSON string into a JavaScript object.\n * @param data The JSON string to parse.\n * @example const parsedJSON = parseSafeJSON<MyInterface>('{\"foo\":\"bar\"}');\n * @returns The parsed JavaScript object, or null if parsing fails.\n */\nconst parseSafeJSON = <T>(data: string = \"\"): T | null => {\n  try {\n    if (data === \"\") return null; // Return null for empty data\n    return JSON.parse(data) as T;\n  } catch (error) {\n    console.error(\"Failed to parse JSON:\", JSON.stringify(error));\n    return null;\n  }\n};\n\nconst isDev = process.env.NODE_ENV === \"development\";\n\nexport {\n  classNames,\n  formatDate,\n  random,\n  throttle,\n  normalizeName,\n  parseSafeJSON,\n  sleep,\n  isDev,\n  fromNow,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}