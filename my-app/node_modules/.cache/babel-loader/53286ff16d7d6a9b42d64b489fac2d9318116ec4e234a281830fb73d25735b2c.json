{"ast":null,"code":"import{REQUIRED_FEATURES,WINDOW_NAMES,RETRY_TIMES,DISPLAY_OVERWOLF_HOOKS_LOGS}from\"app/shared/constants\";import{useGameEventProvider,useWindow}from\"overwolf-hooks\";import{useCallback,useEffect}from\"react\";import{HEARTHSTONE_CLASS_ID,getHearthstoneGame}from\"lib/games\";import{setInfo,setEvent}from\"../stores/background\";import store from\"app/shared/store\";import{log}from\"lib/log\";const{DESKTOP,INGAME}=WINDOW_NAMES;const BackgroundWindow=()=>{const[desktop]=useWindow(DESKTOP,DISPLAY_OVERWOLF_HOOKS_LOGS);const[ingame]=useWindow(INGAME,DISPLAY_OVERWOLF_HOOKS_LOGS);const{start,stop}=useGameEventProvider({onInfoUpdates:info=>store.dispatch(setInfo({...info,timestamp:Date.now()})),onNewEvents:events=>store.dispatch(setEvent({...events,timestamp:Date.now()}))},REQUIRED_FEATURES,RETRY_TIMES,DISPLAY_OVERWOLF_HOOKS_LOGS);const startApp=useCallback(async reason=>{//if the desktop or ingame window is not ready we don't want to start the app\nif(!desktop||!ingame)return;log(reason,\"src/screens/background/components/Screen.tsx\",\"startApp\");const hearthstone=await getHearthstoneGame();if(hearthstone){await Promise.all([start(),ingame===null||ingame===void 0?void 0:ingame.restore(),desktop===null||desktop===void 0?void 0:desktop.minimize()]);}else{await Promise.all([stop(),desktop===null||desktop===void 0?void 0:desktop.restore()]);}},[desktop,ingame,start,stop]);useEffect(()=>{startApp(\"on initial load\");overwolf.games.onGameInfoUpdated.addListener(async event=>{var _event$gameInfo;if(event.runningChanged&&((_event$gameInfo=event.gameInfo)===null||_event$gameInfo===void 0?void 0:_event$gameInfo.classId)===HEARTHSTONE_CLASS_ID){startApp(\"onGameInfoUpdated\");}});overwolf.extensions.onAppLaunchTriggered.addListener(()=>{startApp(\"onAppLaunchTriggered\");});return()=>{overwolf.games.onGameInfoUpdated.removeListener(()=>{});overwolf.extensions.onAppLaunchTriggered.removeListener(()=>{});};},[startApp]);return null;};export default BackgroundWindow;","map":{"version":3,"names":["REQUIRED_FEATURES","WINDOW_NAMES","RETRY_TIMES","DISPLAY_OVERWOLF_HOOKS_LOGS","useGameEventProvider","useWindow","useCallback","useEffect","HEARTHSTONE_CLASS_ID","getHearthstoneGame","setInfo","setEvent","store","log","DESKTOP","INGAME","BackgroundWindow","desktop","ingame","start","stop","onInfoUpdates","info","dispatch","timestamp","Date","now","onNewEvents","events","startApp","reason","hearthstone","Promise","all","restore","minimize","overwolf","games","onGameInfoUpdated","addListener","event","_event$gameInfo","runningChanged","gameInfo","classId","extensions","onAppLaunchTriggered","removeListener"],"sources":["C:/Users/bryan/Desktop/Mob/Projects Backup/Projects/my-app/src/screens/background/components/Screen.tsx"],"sourcesContent":["import {\n  REQUIRED_FEATURES,\n  WINDOW_NAMES,\n  RETRY_TIMES,\n  DISPLAY_OVERWOLF_HOOKS_LOGS,\n} from \"app/shared/constants\";\nimport { useGameEventProvider, useWindow } from \"overwolf-hooks\";\nimport { useCallback, useEffect } from \"react\";\nimport { HEARTHSTONE_CLASS_ID, getHearthstoneGame } from \"lib/games\";\nimport { setInfo, setEvent } from \"../stores/background\";\nimport store from \"app/shared/store\";\nimport { log } from \"lib/log\";\n\nconst { DESKTOP, INGAME } = WINDOW_NAMES;\n\nconst BackgroundWindow = () => {\n  const [desktop] = useWindow(DESKTOP, DISPLAY_OVERWOLF_HOOKS_LOGS);\n  const [ingame] = useWindow(INGAME, DISPLAY_OVERWOLF_HOOKS_LOGS);\n  const { start, stop } = useGameEventProvider(\n    {\n      onInfoUpdates: (info) =>\n        store.dispatch(\n          setInfo({\n            ...info,\n            timestamp: Date.now(),\n          })\n        ),\n      onNewEvents: (events) =>\n        store.dispatch(\n          setEvent({\n            ...events,\n            timestamp: Date.now(),\n          })\n        ),\n    },\n    REQUIRED_FEATURES,\n    RETRY_TIMES,\n    DISPLAY_OVERWOLF_HOOKS_LOGS\n  );\n  const startApp = useCallback(\n    async (reason: string) => {\n      //if the desktop or ingame window is not ready we don't want to start the app\n      if (!desktop || !ingame) return;\n      log(reason, \"src/screens/background/components/Screen.tsx\", \"startApp\");\n      const hearthstone = await getHearthstoneGame();\n      if (hearthstone) {\n        await Promise.all([start(), ingame?.restore(), desktop?.minimize()]);\n      } else {\n        await Promise.all([stop(), desktop?.restore()]);\n      }\n    },\n    [desktop, ingame, start, stop]\n  );\n\n  useEffect(() => {\n    startApp(\"on initial load\");\n    overwolf.games.onGameInfoUpdated.addListener(async (event) => {\n      if (\n        event.runningChanged &&\n        event.gameInfo?.classId === HEARTHSTONE_CLASS_ID\n      ) {\n        startApp(\"onGameInfoUpdated\");\n      }\n    });\n    overwolf.extensions.onAppLaunchTriggered.addListener(() => {\n      startApp(\"onAppLaunchTriggered\");\n    });\n    return () => {\n      overwolf.games.onGameInfoUpdated.removeListener(() => {});\n      overwolf.extensions.onAppLaunchTriggered.removeListener(() => {});\n    };\n  }, [startApp]);\n\n  return null;\n};\n\nexport default BackgroundWindow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}