{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryan\\\\Desktop\\\\Projects\\\\my-app\\\\src\\\\app\\\\components\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, Suspense } from \"react\";\nimport { CurrentScreen } from \"./CurrentScreen\";\nimport { Loading } from \"components/Loading\";\nimport { getCurrentWindow } from \"lib/overwolf-essentials\";\nimport \"../shared/root.css\";\nimport { log } from \"lib/log\";\n\n//This is the main component of the app, it is the root of the app\n//each Page component is rendered in a different window\n//if NODE_ENV is set to development, the app will render in a window named 'dev'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n  const [screenName, setScreenName] = useState(\"\");\n  useEffect(() => {\n    (async function preLoad() {\n      const currentWindow = await getCurrentWindow();\n      setScreenName(currentWindow);\n      log(`Request screen: ${currentWindow}`, \"src/app/components/App.tsx\", \"useEffect\");\n    })();\n  }, []);\n  //this is fallback for the loading current screen\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(CurrentScreen, {\n      name: screenName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Gkbb1EokqopEqxdegQuO7zKNutA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Suspense","CurrentScreen","Loading","getCurrentWindow","log","jsxDEV","_jsxDEV","App","_s","screenName","setScreenName","preLoad","currentWindow","fallback","fileName","_jsxFileName","lineNumber","columnNumber","children","name","_c","$RefreshReg$"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/app/components/App.tsx"],"sourcesContent":["import { useEffect, useState, Suspense } from \"react\";\nimport { CurrentScreen } from \"./CurrentScreen\";\nimport { Loading } from \"components/Loading\";\nimport { getCurrentWindow } from \"lib/overwolf-essentials\";\nimport \"../shared/root.css\";\nimport { log } from \"lib/log\";\n\n//This is the main component of the app, it is the root of the app\n//each Page component is rendered in a different window\n//if NODE_ENV is set to development, the app will render in a window named 'dev'\nexport const App = () => {\n  const [screenName, setScreenName] = useState<string>(\"\");\n\n  useEffect(() => {\n    (async function preLoad() {\n      const currentWindow = await getCurrentWindow();\n      setScreenName(currentWindow);\n      log(\n        `Request screen: ${currentWindow}`,\n        \"src/app/components/App.tsx\",\n        \"useEffect\",\n      );\n    })();\n  }, []);\n  //this is fallback for the loading current screen\n  return (\n    <Suspense fallback={<Loading />}>\n      <CurrentScreen name={screenName} />\n    </Suspense>\n  );\n};\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACrD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,OAAO,oBAAoB;AAC3B,SAASC,GAAG,QAAQ,SAAS;;AAE7B;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,CAAC,eAAea,OAAOA,CAAA,EAAG;MACxB,MAAMC,aAAa,GAAG,MAAMT,gBAAgB,CAAC,CAAC;MAC9CO,aAAa,CAACE,aAAa,CAAC;MAC5BR,GAAG,CACA,mBAAkBQ,aAAc,EAAC,EAClC,4BAA4B,EAC5B,WACF,CAAC;IACH,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN;EACA,oBACEN,OAAA,CAACN,QAAQ;IAACa,QAAQ,eAAEP,OAAA,CAACJ,OAAO;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IAAAC,QAAA,eAC9BZ,OAAA,CAACL,aAAa;MAACkB,IAAI,EAAEV;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEf,CAAC;AAACT,EAAA,CApBWD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}