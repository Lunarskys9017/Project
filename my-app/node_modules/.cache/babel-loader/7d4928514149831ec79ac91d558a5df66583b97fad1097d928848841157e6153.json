{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { SUBSCRIPTION_ID } from \"../constants\";\nimport { isDev, sleep } from \"lib/utils\";\nimport { log } from \"lib/log\";\nasync function openSubscribeWindow() {\n  if (isDev) {\n    log(\"dev mode, not opening subscribe window\", \"src/features/monetization/hooks/useAdRemoval.ts\", \"openSubscribeWindow\");\n    return;\n  }\n  const UID = await new Promise((resolve, reject) => {\n    overwolf.extensions.current.getManifest(manifest => {\n      if (manifest) {\n        resolve(manifest.UID);\n      } else {\n        reject(null);\n      }\n    });\n  });\n  overwolf.utils.openStore({\n    page: \"SubscriptionPage\",\n    uid: UID\n  });\n}\nconst useAdRemoval = () => {\n  _s();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  // Function to handle the subscription change event\n\n  const handleSubscriptionState = () => {\n    setIsSubscribed(true);\n  };\n  useEffect(() => {\n    if (isDev) {\n      setIsSubscribed(false);\n      setIsLoading(false);\n      return;\n    }\n    // console.log('plan', subscriptionId)\n    // Subscribe to the subscription change event\n    const handleSubscriptionChange = async info => {\n      setIsLoading(true);\n      console.log(\"Subscription changed\", info);\n      if (Array.isArray(info === null || info === void 0 ? void 0 : info.plans) && info.plans.includes(SUBSCRIPTION_ID)) {\n        handleSubscriptionState();\n      }\n      await sleep(3000);\n      setIsLoading(false);\n    };\n    overwolf.profile.subscriptions.getActivePlans(async info => {\n      console.log(\"Active plans\", info);\n      if (info.success && Array.isArray(info === null || info === void 0 ? void 0 : info.plans) && info.plans.includes(SUBSCRIPTION_ID)) {\n        handleSubscriptionState();\n      }\n      await sleep(3000);\n      setIsLoading(false);\n    });\n    overwolf.profile.subscriptions.onSubscriptionChanged.addListener(handleSubscriptionChange);\n\n    // Unsubscribe from the event when the component unmounts\n    return () => {\n      overwolf.profile.subscriptions.onSubscriptionChanged.removeListener(handleSubscriptionChange);\n    };\n  }, []);\n  return {\n    isSubscribed,\n    isLoading\n  };\n};\n_s(useAdRemoval, \"XBOZ/qWeYcZNQPwg+7Bfo6vWI5A=\");\nexport { useAdRemoval, openSubscribeWindow };","map":{"version":3,"names":["useEffect","useState","SUBSCRIPTION_ID","isDev","sleep","log","openSubscribeWindow","UID","Promise","resolve","reject","overwolf","extensions","current","getManifest","manifest","utils","openStore","page","uid","useAdRemoval","_s","isSubscribed","setIsSubscribed","isLoading","setIsLoading","handleSubscriptionState","handleSubscriptionChange","info","console","Array","isArray","plans","includes","profile","subscriptions","getActivePlans","success","onSubscriptionChanged","addListener","removeListener"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/features/monetization/hooks/useAdRemoval.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { SUBSCRIPTION_ID } from \"../constants\";\nimport { isDev, sleep } from \"lib/utils\";\nimport { log } from \"lib/log\";\n\nasync function openSubscribeWindow() {\n  if (isDev) {\n    log(\n      \"dev mode, not opening subscribe window\",\n      \"src/features/monetization/hooks/useAdRemoval.ts\",\n      \"openSubscribeWindow\"\n    );\n    return;\n  }\n  const UID = await new Promise<string>((resolve, reject) => {\n    overwolf.extensions.current.getManifest((manifest) => {\n      if (manifest) {\n        resolve(manifest.UID);\n      } else {\n        reject(null);\n      }\n    });\n  });\n  overwolf.utils.openStore({\n    page: \"SubscriptionPage\" as overwolf.utils.enums.eStorePage.SubscriptionPage,\n    uid: UID,\n  });\n}\n\nconst useAdRemoval = () => {\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  // Function to handle the subscription change event\n\n  const handleSubscriptionState = () => {\n    setIsSubscribed(true);\n  };\n\n  useEffect(() => {\n    if (isDev) {\n      setIsSubscribed(false);\n      setIsLoading(false);\n      return;\n    }\n    // console.log('plan', subscriptionId)\n    // Subscribe to the subscription change event\n    const handleSubscriptionChange = async (\n      info: overwolf.profile.subscriptions.SubscriptionChangedEvent\n    ) => {\n      setIsLoading(true);\n      console.log(\"Subscription changed\", info);\n      if (Array.isArray(info?.plans) && info.plans.includes(SUBSCRIPTION_ID)) {\n        handleSubscriptionState();\n      }\n      await sleep(3_000);\n      setIsLoading(false);\n    };\n\n    overwolf.profile.subscriptions.getActivePlans(async (info) => {\n      console.log(\"Active plans\", info);\n      if (\n        info.success &&\n        Array.isArray(info?.plans) &&\n        info.plans.includes(SUBSCRIPTION_ID)\n      ) {\n        handleSubscriptionState();\n      }\n      await sleep(3_000);\n      setIsLoading(false);\n    });\n    overwolf.profile.subscriptions.onSubscriptionChanged.addListener(\n      handleSubscriptionChange\n    );\n\n    // Unsubscribe from the event when the component unmounts\n    return () => {\n      overwolf.profile.subscriptions.onSubscriptionChanged.removeListener(\n        handleSubscriptionChange\n      );\n    };\n  }, []);\n\n  return { isSubscribed, isLoading };\n};\n\nexport { useAdRemoval, openSubscribeWindow };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}