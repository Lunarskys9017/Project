{"ast":null,"code":"const AGRequest = require('ag-request');\nlet createWebSocket;\nif (typeof WebSocket !== 'undefined') {\n  createWebSocket = function (uri, options) {\n    return new WebSocket(uri);\n  };\n} else {\n  let WebSocket = require('ws');\n  createWebSocket = function (uri, options) {\n    return new WebSocket(uri, [], options);\n  };\n}\nconst scErrors = require('sc-errors');\nconst TimeoutError = scErrors.TimeoutError;\nconst BadConnectionError = scErrors.BadConnectionError;\nfunction AGTransport(authEngine, codecEngine, options, wsOptions, handlers) {\n  this.state = this.CLOSED;\n  this.auth = authEngine;\n  this.codec = codecEngine;\n  this.options = options;\n  this.wsOptions = wsOptions;\n  this.protocolVersion = options.protocolVersion;\n  this.connectTimeout = options.connectTimeout;\n  this.pingTimeout = options.pingTimeout;\n  this.pingTimeoutDisabled = !!options.pingTimeoutDisabled;\n  this.callIdGenerator = options.callIdGenerator;\n  this.authTokenName = options.authTokenName;\n  this.isBufferingBatch = false;\n  this._pingTimeoutTicker = null;\n  this._callbackMap = {};\n  this._batchBuffer = [];\n  if (!handlers) {\n    handlers = {};\n  }\n  this._onOpenHandler = handlers.onOpen || function () {};\n  this._onOpenAbortHandler = handlers.onOpenAbort || function () {};\n  this._onCloseHandler = handlers.onClose || function () {};\n  this._onEventHandler = handlers.onEvent || function () {};\n  this._onErrorHandler = handlers.onError || function () {};\n  this._onInboundInvokeHandler = handlers.onInboundInvoke || function () {};\n  this._onInboundTransmitHandler = handlers.onInboundTransmit || function () {};\n\n  // Open the connection.\n\n  this.state = this.CONNECTING;\n  let uri = this.uri();\n  let wsSocket = createWebSocket(uri, wsOptions);\n  wsSocket.binaryType = this.options.binaryType;\n  this.socket = wsSocket;\n  wsSocket.onopen = () => {\n    this._onOpen();\n  };\n  wsSocket.onclose = async event => {\n    let code;\n    if (event.code == null) {\n      // This is to handle an edge case in React Native whereby\n      // event.code is undefined when the mobile device is locked.\n      // Note that this condition may also apply to an abnormal close\n      // (no close control frame) which would normally be a 1006.\n      code = 1005;\n    } else {\n      code = event.code;\n    }\n    this._destroy(code, event.reason);\n  };\n  wsSocket.onmessage = (message, flags) => {\n    this._onMessage(message.data);\n  };\n  wsSocket.onerror = error => {\n    // The onclose event will be called automatically after the onerror event\n    // if the socket is connected - Otherwise, if it's in the middle of\n    // connecting, we want to close it manually with a 1006 - This is necessary\n    // to prevent inconsistent behavior when running the client in Node.js\n    // vs in a browser.\n    if (this.state === this.CONNECTING) {\n      this._destroy(1006);\n    }\n  };\n  this._connectTimeoutRef = setTimeout(() => {\n    this._destroy(4007);\n    this.socket.close(4007);\n  }, this.connectTimeout);\n  if (this.protocolVersion === 1) {\n    this._handlePing = message => {\n      if (message === '#1') {\n        this._resetPingTimeout();\n        if (this.socket.readyState === this.socket.OPEN) {\n          this.send('#2');\n        }\n        return true;\n      }\n      return false;\n    };\n  } else {\n    this._handlePing = message => {\n      if (message === '') {\n        this._resetPingTimeout();\n        if (this.socket.readyState === this.socket.OPEN) {\n          this.send('');\n        }\n        return true;\n      }\n      return false;\n    };\n  }\n}\nAGTransport.CONNECTING = AGTransport.prototype.CONNECTING = 'connecting';\nAGTransport.OPEN = AGTransport.prototype.OPEN = 'open';\nAGTransport.CLOSED = AGTransport.prototype.CLOSED = 'closed';\nAGTransport.computeURI = function (options) {\n  let query = options.query || {};\n  let scheme;\n  if (options.protocolScheme == null) {\n    scheme = options.secure ? 'wss' : 'ws';\n  } else {\n    scheme = options.protocolScheme;\n  }\n  if (options.timestampRequests) {\n    query[options.timestampParam] = new Date().getTime();\n  }\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (let item of value) {\n        searchParams.append(key, item);\n      }\n    } else {\n      searchParams.set(key, value);\n    }\n  }\n  query = searchParams.toString();\n  if (query.length) {\n    query = '?' + query;\n  }\n  let host;\n  let path;\n  if (options.socketPath == null) {\n    if (options.host) {\n      host = options.host;\n    } else {\n      let port = '';\n      if (options.port && (scheme === 'wss' && options.port !== 443 || scheme === 'ws' && options.port !== 80)) {\n        port = ':' + options.port;\n      }\n      host = options.hostname + port;\n    }\n    path = options.path;\n  } else {\n    host = options.socketPath;\n    path = `:${options.path}`;\n  }\n  return scheme + '://' + host + path + query;\n};\nAGTransport.prototype.uri = function () {\n  return AGTransport.computeURI(this.options);\n};\nAGTransport.prototype._onOpen = async function () {\n  clearTimeout(this._connectTimeoutRef);\n  this._resetPingTimeout();\n  let status;\n  try {\n    status = await this._handshake();\n  } catch (err) {\n    if (err.statusCode == null) {\n      err.statusCode = 4003;\n    }\n    this._onError(err);\n    this._destroy(err.statusCode, err.toString());\n    this.socket.close(err.statusCode);\n    return;\n  }\n  this.state = this.OPEN;\n  if (status) {\n    this.pingTimeout = status.pingTimeout;\n  }\n  this._resetPingTimeout();\n  this._onOpenHandler(status);\n};\nAGTransport.prototype._handshake = async function () {\n  let token = await this.auth.loadToken(this.authTokenName);\n  // Don't wait for this.state to be 'open'.\n  // The underlying WebSocket (this.socket) is already open.\n  let options = {\n    force: true\n  };\n  let status = await this.invoke('#handshake', {\n    authToken: token\n  }, options);\n  if (status) {\n    // Add the token which was used as part of authentication attempt\n    // to the status object.\n    status.authToken = token;\n    if (status.authError) {\n      status.authError = scErrors.hydrateError(status.authError);\n    }\n  }\n  return status;\n};\nAGTransport.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {\n  Object.keys(this._callbackMap || {}).forEach(i => {\n    let eventObject = this._callbackMap[i];\n    delete this._callbackMap[i];\n    clearTimeout(eventObject.timeout);\n    delete eventObject.timeout;\n    let errorMessage = `Event ${eventObject.event} was aborted due to a bad connection`;\n    let badConnectionError = new BadConnectionError(errorMessage, failureType);\n    let callback = eventObject.callback;\n    if (callback) {\n      delete eventObject.callback;\n      callback.call(eventObject, badConnectionError, eventObject);\n    }\n  });\n};\nAGTransport.prototype._destroy = function (code, reason) {\n  let protocolReason = scErrors.socketProtocolErrorStatuses[code];\n  if (!reason && scErrors.socketProtocolErrorStatuses[code]) {\n    reason = scErrors.socketProtocolErrorStatuses[code];\n  }\n  delete this.socket.onopen;\n  delete this.socket.onclose;\n  delete this.socket.onmessage;\n  delete this.socket.onerror;\n  clearTimeout(this._connectTimeoutRef);\n  clearTimeout(this._pingTimeoutTicker);\n  if (this.state === this.OPEN) {\n    this.state = this.CLOSED;\n    this._abortAllPendingEventsDueToBadConnection('disconnect');\n    this._onCloseHandler({\n      code,\n      reason\n    });\n  } else if (this.state === this.CONNECTING) {\n    this.state = this.CLOSED;\n    this._abortAllPendingEventsDueToBadConnection('connectAbort');\n    this._onOpenAbortHandler({\n      code,\n      reason\n    });\n  } else if (this.state === this.CLOSED) {\n    this._abortAllPendingEventsDueToBadConnection('connectAbort');\n  }\n};\nAGTransport.prototype._processInboundPacket = function (packet, message) {\n  if (packet && typeof packet.event === 'string') {\n    if (typeof packet.cid === 'number') {\n      let request = new AGRequest(this, packet.cid, packet.event, packet.data);\n      this._onInboundInvokeHandler(request);\n    } else {\n      this._onInboundTransmitHandler({\n        ...packet\n      });\n    }\n  } else if (packet && typeof packet.rid === 'number') {\n    let eventObject = this._callbackMap[packet.rid];\n    if (eventObject) {\n      clearTimeout(eventObject.timeout);\n      delete eventObject.timeout;\n      delete this._callbackMap[packet.rid];\n      if (eventObject.callback) {\n        let rehydratedError = scErrors.hydrateError(packet.error);\n        eventObject.callback(rehydratedError, packet.data);\n      }\n    }\n  } else {\n    this._onEventHandler({\n      event: 'raw',\n      data: {\n        message\n      }\n    });\n  }\n};\nAGTransport.prototype._onMessage = function (message) {\n  this._onEventHandler({\n    event: 'message',\n    data: {\n      message\n    }\n  });\n  if (this._handlePing(message)) {\n    return;\n  }\n  let packet = this.decode(message);\n  if (Array.isArray(packet)) {\n    let len = packet.length;\n    for (let i = 0; i < len; i++) {\n      this._processInboundPacket(packet[i], message);\n    }\n  } else {\n    this._processInboundPacket(packet, message);\n  }\n};\nAGTransport.prototype._onError = function (error) {\n  this._onErrorHandler({\n    error\n  });\n};\nAGTransport.prototype._resetPingTimeout = function () {\n  if (this.pingTimeoutDisabled) {\n    return;\n  }\n  let now = new Date().getTime();\n  clearTimeout(this._pingTimeoutTicker);\n  this._pingTimeoutTicker = setTimeout(() => {\n    this._destroy(4000);\n    this.socket.close(4000);\n  }, this.pingTimeout);\n};\nAGTransport.prototype.clearAllListeners = function () {\n  this._onOpenHandler = function () {};\n  this._onOpenAbortHandler = function () {};\n  this._onCloseHandler = function () {};\n  this._onEventHandler = function () {};\n  this._onErrorHandler = function () {};\n  this._onInboundInvokeHandler = function () {};\n  this._onInboundTransmitHandler = function () {};\n};\nAGTransport.prototype.startBatch = function () {\n  this.isBufferingBatch = true;\n  this._batchBuffer = [];\n};\nAGTransport.prototype.flushBatch = function () {\n  this.isBufferingBatch = false;\n  if (!this._batchBuffer.length) {\n    return;\n  }\n  let serializedBatch = this.serializeObject(this._batchBuffer);\n  this._batchBuffer = [];\n  this.send(serializedBatch);\n};\nAGTransport.prototype.cancelBatch = function () {\n  this.isBufferingBatch = false;\n  this._batchBuffer = [];\n};\nAGTransport.prototype.getBytesReceived = function () {\n  return this.socket.bytesReceived;\n};\nAGTransport.prototype.close = function (code, reason) {\n  if (this.state === this.OPEN || this.state === this.CONNECTING) {\n    code = code || 1000;\n    this._destroy(code, reason);\n    this.socket.close(code, reason);\n  }\n};\nAGTransport.prototype.transmitObject = function (eventObject) {\n  let simpleEventObject = {\n    event: eventObject.event,\n    data: eventObject.data\n  };\n  if (eventObject.callback) {\n    simpleEventObject.cid = eventObject.cid = this.callIdGenerator();\n    this._callbackMap[eventObject.cid] = eventObject;\n  }\n  this.sendObject(simpleEventObject);\n  return eventObject.cid || null;\n};\nAGTransport.prototype._handleEventAckTimeout = function (eventObject) {\n  if (eventObject.cid) {\n    delete this._callbackMap[eventObject.cid];\n  }\n  delete eventObject.timeout;\n  let callback = eventObject.callback;\n  if (callback) {\n    delete eventObject.callback;\n    let error = new TimeoutError(`Event response for ${eventObject.event} event timed out`);\n    callback.call(eventObject, error, eventObject);\n  }\n};\nAGTransport.prototype.transmit = function (event, data, options) {\n  let eventObject = {\n    event,\n    data\n  };\n  if (this.state === this.OPEN || options.force) {\n    this.transmitObject(eventObject);\n  }\n  return Promise.resolve();\n};\nAGTransport.prototype.invokeRaw = function (event, data, options, callback) {\n  let eventObject = {\n    event,\n    data,\n    callback\n  };\n  if (!options.noTimeout) {\n    eventObject.timeout = setTimeout(() => {\n      this._handleEventAckTimeout(eventObject);\n    }, this.options.ackTimeout);\n  }\n  let cid = null;\n  if (this.state === this.OPEN || options.force) {\n    cid = this.transmitObject(eventObject);\n  }\n  return cid;\n};\nAGTransport.prototype.invoke = function (event, data, options) {\n  return new Promise((resolve, reject) => {\n    this.invokeRaw(event, data, options, (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(data);\n    });\n  });\n};\nAGTransport.prototype.cancelPendingResponse = function (cid) {\n  delete this._callbackMap[cid];\n};\nAGTransport.prototype.decode = function (message) {\n  return this.codec.decode(message);\n};\nAGTransport.prototype.encode = function (object) {\n  return this.codec.encode(object);\n};\nAGTransport.prototype.send = function (data) {\n  if (this.socket.readyState !== this.socket.OPEN) {\n    this._destroy(1005);\n  } else {\n    this.socket.send(data);\n  }\n};\nAGTransport.prototype.serializeObject = function (object) {\n  let str;\n  try {\n    str = this.encode(object);\n  } catch (error) {\n    this._onError(error);\n    return null;\n  }\n  return str;\n};\nAGTransport.prototype.sendObject = function (object) {\n  if (this.isBufferingBatch) {\n    this._batchBuffer.push(object);\n    return;\n  }\n  let str = this.serializeObject(object);\n  if (str != null) {\n    this.send(str);\n  }\n};\nmodule.exports = AGTransport;","map":{"version":3,"names":["AGRequest","require","createWebSocket","WebSocket","uri","options","scErrors","TimeoutError","BadConnectionError","AGTransport","authEngine","codecEngine","wsOptions","handlers","state","CLOSED","auth","codec","protocolVersion","connectTimeout","pingTimeout","pingTimeoutDisabled","callIdGenerator","authTokenName","isBufferingBatch","_pingTimeoutTicker","_callbackMap","_batchBuffer","_onOpenHandler","onOpen","_onOpenAbortHandler","onOpenAbort","_onCloseHandler","onClose","_onEventHandler","onEvent","_onErrorHandler","onError","_onInboundInvokeHandler","onInboundInvoke","_onInboundTransmitHandler","onInboundTransmit","CONNECTING","wsSocket","binaryType","socket","onopen","_onOpen","onclose","event","code","_destroy","reason","onmessage","message","flags","_onMessage","data","onerror","error","_connectTimeoutRef","setTimeout","close","_handlePing","_resetPingTimeout","readyState","OPEN","send","prototype","computeURI","query","scheme","protocolScheme","secure","timestampRequests","timestampParam","Date","getTime","searchParams","URLSearchParams","key","value","Object","entries","Array","isArray","item","append","set","toString","length","host","path","socketPath","port","hostname","clearTimeout","status","_handshake","err","statusCode","_onError","token","loadToken","force","invoke","authToken","authError","hydrateError","_abortAllPendingEventsDueToBadConnection","failureType","keys","forEach","i","eventObject","timeout","errorMessage","badConnectionError","callback","call","protocolReason","socketProtocolErrorStatuses","_processInboundPacket","packet","cid","request","rid","rehydratedError","decode","len","now","clearAllListeners","startBatch","flushBatch","serializedBatch","serializeObject","cancelBatch","getBytesReceived","bytesReceived","transmitObject","simpleEventObject","sendObject","_handleEventAckTimeout","transmit","Promise","resolve","invokeRaw","noTimeout","ackTimeout","reject","cancelPendingResponse","encode","object","str","push","module","exports"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/node_modules/socketcluster-client/lib/transport.js"],"sourcesContent":["const AGRequest = require('ag-request');\r\n\r\nlet createWebSocket;\r\n\r\nif (typeof WebSocket !== 'undefined') {\r\n  createWebSocket = function (uri, options) {\r\n    return new WebSocket(uri);\r\n  };\r\n} else {\r\n  let WebSocket = require('ws');\r\n  createWebSocket = function (uri, options) {\r\n    return new WebSocket(uri, [], options);\r\n  };\r\n}\r\n\r\nconst scErrors = require('sc-errors');\r\nconst TimeoutError = scErrors.TimeoutError;\r\nconst BadConnectionError = scErrors.BadConnectionError;\r\n\r\nfunction AGTransport(authEngine, codecEngine, options, wsOptions, handlers) {\r\n  this.state = this.CLOSED;\r\n  this.auth = authEngine;\r\n  this.codec = codecEngine;\r\n  this.options = options;\r\n  this.wsOptions = wsOptions;\r\n  this.protocolVersion = options.protocolVersion;\r\n  this.connectTimeout = options.connectTimeout;\r\n  this.pingTimeout = options.pingTimeout;\r\n  this.pingTimeoutDisabled = !!options.pingTimeoutDisabled;\r\n  this.callIdGenerator = options.callIdGenerator;\r\n  this.authTokenName = options.authTokenName;\r\n  this.isBufferingBatch = false;\r\n\r\n  this._pingTimeoutTicker = null;\r\n  this._callbackMap = {};\r\n  this._batchBuffer = [];\r\n\r\n  if (!handlers) {\r\n    handlers = {};\r\n  }\r\n\r\n  this._onOpenHandler = handlers.onOpen || function () {};\r\n  this._onOpenAbortHandler = handlers.onOpenAbort || function () {};\r\n  this._onCloseHandler = handlers.onClose || function () {};\r\n  this._onEventHandler = handlers.onEvent || function () {};\r\n  this._onErrorHandler = handlers.onError || function () {};\r\n  this._onInboundInvokeHandler  = handlers.onInboundInvoke || function () {};\r\n  this._onInboundTransmitHandler = handlers.onInboundTransmit || function () {};\r\n\r\n  // Open the connection.\r\n\r\n  this.state = this.CONNECTING;\r\n  let uri = this.uri();\r\n\r\n  let wsSocket = createWebSocket(uri, wsOptions);\r\n  wsSocket.binaryType = this.options.binaryType;\r\n\r\n  this.socket = wsSocket;\r\n\r\n  wsSocket.onopen = () => {\r\n    this._onOpen();\r\n  };\r\n\r\n  wsSocket.onclose = async (event) => {\r\n    let code;\r\n    if (event.code == null) {\r\n      // This is to handle an edge case in React Native whereby\r\n      // event.code is undefined when the mobile device is locked.\r\n      // Note that this condition may also apply to an abnormal close\r\n      // (no close control frame) which would normally be a 1006.\r\n      code = 1005;\r\n    } else {\r\n      code = event.code;\r\n    }\r\n    this._destroy(code, event.reason);\r\n  };\r\n\r\n  wsSocket.onmessage = (message, flags) => {\r\n    this._onMessage(message.data);\r\n  };\r\n\r\n  wsSocket.onerror = (error) => {\r\n    // The onclose event will be called automatically after the onerror event\r\n    // if the socket is connected - Otherwise, if it's in the middle of\r\n    // connecting, we want to close it manually with a 1006 - This is necessary\r\n    // to prevent inconsistent behavior when running the client in Node.js\r\n    // vs in a browser.\r\n    if (this.state === this.CONNECTING) {\r\n      this._destroy(1006);\r\n    }\r\n  };\r\n\r\n  this._connectTimeoutRef = setTimeout(() => {\r\n    this._destroy(4007);\r\n    this.socket.close(4007);\r\n  }, this.connectTimeout);\r\n\r\n  if (this.protocolVersion === 1) {\r\n    this._handlePing = (message) => {\r\n      if (message === '#1') {\r\n        this._resetPingTimeout();\r\n        if (this.socket.readyState === this.socket.OPEN) {\r\n          this.send('#2');\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n  } else {\r\n    this._handlePing = (message) => {\r\n      if (message === '') {\r\n        this._resetPingTimeout();\r\n        if (this.socket.readyState === this.socket.OPEN) {\r\n          this.send('');\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n  }\r\n}\r\n\r\nAGTransport.CONNECTING = AGTransport.prototype.CONNECTING = 'connecting';\r\nAGTransport.OPEN = AGTransport.prototype.OPEN = 'open';\r\nAGTransport.CLOSED = AGTransport.prototype.CLOSED = 'closed';\r\n\r\nAGTransport.computeURI = function (options) {\r\n  let query = options.query || {};\r\n  let scheme;\r\n  if (options.protocolScheme == null) {\r\n    scheme = options.secure ? 'wss' : 'ws';\r\n  } else {\r\n    scheme = options.protocolScheme;\r\n  }\r\n\r\n  if (options.timestampRequests) {\r\n    query[options.timestampParam] = (new Date()).getTime();\r\n  }\r\n\r\n  let searchParams = new URLSearchParams();\r\n  for (let [key, value] of Object.entries(query)) {\r\n    if (Array.isArray(value)) {\r\n      for (let item of value) {\r\n        searchParams.append(key, item);\r\n      }\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n  }\r\n\r\n  query = searchParams.toString();\r\n\r\n  if (query.length) {\r\n    query = '?' + query;\r\n  }\r\n\r\n  let host;\r\n  let path;\r\n  if (options.socketPath == null) {\r\n    if (options.host) {\r\n      host = options.host;\r\n    } else {\r\n      let port = '';\r\n\r\n      if (options.port && ((scheme === 'wss' && options.port !== 443)\r\n        || (scheme === 'ws' && options.port !== 80))) {\r\n        port = ':' + options.port;\r\n      }\r\n      host = options.hostname + port;\r\n    }\r\n    path = options.path;\r\n  } else {\r\n    host = options.socketPath;\r\n    path = `:${options.path}`;\r\n  }\r\n  return scheme + '://' + host + path + query;\r\n};\r\n\r\nAGTransport.prototype.uri = function () {\r\n  return AGTransport.computeURI(this.options);\r\n};\r\n\r\nAGTransport.prototype._onOpen = async function () {\r\n  clearTimeout(this._connectTimeoutRef);\r\n  this._resetPingTimeout();\r\n\r\n  let status;\r\n\r\n  try {\r\n    status = await this._handshake();\r\n  } catch (err) {\r\n    if (err.statusCode == null) {\r\n      err.statusCode = 4003;\r\n    }\r\n    this._onError(err);\r\n    this._destroy(err.statusCode, err.toString());\r\n    this.socket.close(err.statusCode);\r\n    return;\r\n  }\r\n\r\n  this.state = this.OPEN;\r\n  if (status) {\r\n    this.pingTimeout = status.pingTimeout;\r\n  }\r\n  this._resetPingTimeout();\r\n  this._onOpenHandler(status);\r\n};\r\n\r\nAGTransport.prototype._handshake = async function () {\r\n  let token = await this.auth.loadToken(this.authTokenName);\r\n  // Don't wait for this.state to be 'open'.\r\n  // The underlying WebSocket (this.socket) is already open.\r\n  let options = {\r\n    force: true\r\n  };\r\n  let status = await this.invoke('#handshake', {authToken: token}, options);\r\n  if (status) {\r\n    // Add the token which was used as part of authentication attempt\r\n    // to the status object.\r\n    status.authToken = token;\r\n    if (status.authError) {\r\n      status.authError = scErrors.hydrateError(status.authError);\r\n    }\r\n  }\r\n  return status;\r\n};\r\n\r\nAGTransport.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {\r\n  Object.keys(this._callbackMap || {}).forEach((i) => {\r\n    let eventObject = this._callbackMap[i];\r\n    delete this._callbackMap[i];\r\n\r\n    clearTimeout(eventObject.timeout);\r\n    delete eventObject.timeout;\r\n\r\n    let errorMessage = `Event ${eventObject.event} was aborted due to a bad connection`;\r\n    let badConnectionError = new BadConnectionError(errorMessage, failureType);\r\n\r\n    let callback = eventObject.callback;\r\n    if (callback) {\r\n      delete eventObject.callback;\r\n\r\n      callback.call(eventObject, badConnectionError, eventObject);\r\n    }\r\n  });\r\n};\r\n\r\nAGTransport.prototype._destroy = function (code, reason) {\r\n  let protocolReason = scErrors.socketProtocolErrorStatuses[code];\r\n  if (!reason && scErrors.socketProtocolErrorStatuses[code]) {\r\n    reason = scErrors.socketProtocolErrorStatuses[code];\r\n  }\r\n  delete this.socket.onopen;\r\n  delete this.socket.onclose;\r\n  delete this.socket.onmessage;\r\n  delete this.socket.onerror;\r\n\r\n  clearTimeout(this._connectTimeoutRef);\r\n  clearTimeout(this._pingTimeoutTicker);\r\n\r\n  if (this.state === this.OPEN) {\r\n    this.state = this.CLOSED;\r\n    this._abortAllPendingEventsDueToBadConnection('disconnect');\r\n    this._onCloseHandler({code, reason});\r\n  } else if (this.state === this.CONNECTING) {\r\n    this.state = this.CLOSED;\r\n    this._abortAllPendingEventsDueToBadConnection('connectAbort');\r\n    this._onOpenAbortHandler({code, reason});\r\n  } else if (this.state === this.CLOSED) {\r\n    this._abortAllPendingEventsDueToBadConnection('connectAbort');\r\n  }\r\n};\r\n\r\nAGTransport.prototype._processInboundPacket = function (packet, message) {\r\n  if (packet && typeof packet.event === 'string') {\r\n    if (typeof packet.cid === 'number') {\r\n      let request = new AGRequest(this, packet.cid, packet.event, packet.data);\r\n      this._onInboundInvokeHandler(request);\r\n    } else {\r\n      this._onInboundTransmitHandler({...packet});\r\n    }\r\n  } else if (packet && typeof packet.rid === 'number') {\r\n    let eventObject = this._callbackMap[packet.rid];\r\n    if (eventObject) {\r\n      clearTimeout(eventObject.timeout);\r\n      delete eventObject.timeout;\r\n      delete this._callbackMap[packet.rid];\r\n\r\n      if (eventObject.callback) {\r\n        let rehydratedError = scErrors.hydrateError(packet.error);\r\n        eventObject.callback(rehydratedError, packet.data);\r\n      }\r\n    }\r\n  } else {\r\n    this._onEventHandler({event: 'raw', data: {message}});\r\n  }\r\n};\r\n\r\nAGTransport.prototype._onMessage = function (message) {\r\n  this._onEventHandler({event: 'message', data: {message}});\r\n\r\n  if (this._handlePing(message)) {\r\n    return;\r\n  }\r\n\r\n  let packet = this.decode(message);\r\n\r\n  if (Array.isArray(packet)) {\r\n    let len = packet.length;\r\n    for (let i = 0; i < len; i++) {\r\n      this._processInboundPacket(packet[i], message);\r\n    }\r\n  } else {\r\n    this._processInboundPacket(packet, message);\r\n  }\r\n};\r\n\r\nAGTransport.prototype._onError = function (error) {\r\n  this._onErrorHandler({error});\r\n};\r\n\r\nAGTransport.prototype._resetPingTimeout = function () {\r\n  if (this.pingTimeoutDisabled) {\r\n    return;\r\n  }\r\n\r\n  let now = (new Date()).getTime();\r\n  clearTimeout(this._pingTimeoutTicker);\r\n  this._pingTimeoutTicker = setTimeout(() => {\r\n    this._destroy(4000);\r\n    this.socket.close(4000);\r\n  }, this.pingTimeout);\r\n};\r\n\r\nAGTransport.prototype.clearAllListeners = function () {\r\n  this._onOpenHandler = function () {};\r\n  this._onOpenAbortHandler = function () {};\r\n  this._onCloseHandler = function () {};\r\n  this._onEventHandler = function () {};\r\n  this._onErrorHandler = function () {};\r\n  this._onInboundInvokeHandler  = function () {};\r\n  this._onInboundTransmitHandler = function () {};\r\n};\r\n\r\nAGTransport.prototype.startBatch = function () {\r\n  this.isBufferingBatch = true;\r\n  this._batchBuffer = [];\r\n};\r\n\r\nAGTransport.prototype.flushBatch = function () {\r\n  this.isBufferingBatch = false;\r\n  if (!this._batchBuffer.length) {\r\n    return;\r\n  }\r\n  let serializedBatch = this.serializeObject(this._batchBuffer);\r\n  this._batchBuffer = [];\r\n  this.send(serializedBatch);\r\n};\r\n\r\nAGTransport.prototype.cancelBatch = function () {\r\n  this.isBufferingBatch = false;\r\n  this._batchBuffer = [];\r\n};\r\n\r\nAGTransport.prototype.getBytesReceived = function () {\r\n  return this.socket.bytesReceived;\r\n};\r\n\r\nAGTransport.prototype.close = function (code, reason) {\r\n  if (this.state === this.OPEN || this.state === this.CONNECTING) {\r\n    code = code || 1000;\r\n    this._destroy(code, reason);\r\n    this.socket.close(code, reason);\r\n  }\r\n};\r\n\r\nAGTransport.prototype.transmitObject = function (eventObject) {\r\n  let simpleEventObject = {\r\n    event: eventObject.event,\r\n    data: eventObject.data\r\n  };\r\n\r\n  if (eventObject.callback) {\r\n    simpleEventObject.cid = eventObject.cid = this.callIdGenerator();\r\n    this._callbackMap[eventObject.cid] = eventObject;\r\n  }\r\n\r\n  this.sendObject(simpleEventObject);\r\n\r\n  return eventObject.cid || null;\r\n};\r\n\r\nAGTransport.prototype._handleEventAckTimeout = function (eventObject) {\r\n  if (eventObject.cid) {\r\n    delete this._callbackMap[eventObject.cid];\r\n  }\r\n  delete eventObject.timeout;\r\n\r\n  let callback = eventObject.callback;\r\n  if (callback) {\r\n    delete eventObject.callback;\r\n    let error = new TimeoutError(`Event response for ${eventObject.event} event timed out`);\r\n    callback.call(eventObject, error, eventObject);\r\n  }\r\n};\r\n\r\nAGTransport.prototype.transmit = function (event, data, options) {\r\n  let eventObject = {\r\n    event,\r\n    data\r\n  };\r\n\r\n  if (this.state === this.OPEN || options.force) {\r\n    this.transmitObject(eventObject);\r\n  }\r\n  return Promise.resolve();\r\n};\r\n\r\nAGTransport.prototype.invokeRaw = function (event, data, options, callback) {\r\n  let eventObject = {\r\n    event,\r\n    data,\r\n    callback\r\n  };\r\n\r\n  if (!options.noTimeout) {\r\n    eventObject.timeout = setTimeout(() => {\r\n      this._handleEventAckTimeout(eventObject);\r\n    }, this.options.ackTimeout);\r\n  }\r\n  let cid = null;\r\n  if (this.state === this.OPEN || options.force) {\r\n    cid = this.transmitObject(eventObject);\r\n  }\r\n  return cid;\r\n};\r\n\r\nAGTransport.prototype.invoke = function (event, data, options) {\r\n  return new Promise((resolve, reject) => {\r\n    this.invokeRaw(event, data, options, (err, data) => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n      resolve(data);\r\n    });\r\n  });\r\n};\r\n\r\nAGTransport.prototype.cancelPendingResponse = function (cid) {\r\n  delete this._callbackMap[cid];\r\n};\r\n\r\nAGTransport.prototype.decode = function (message) {\r\n  return this.codec.decode(message);\r\n};\r\n\r\nAGTransport.prototype.encode = function (object) {\r\n  return this.codec.encode(object);\r\n};\r\n\r\nAGTransport.prototype.send = function (data) {\r\n  if (this.socket.readyState !== this.socket.OPEN) {\r\n    this._destroy(1005);\r\n  } else {\r\n    this.socket.send(data);\r\n  }\r\n};\r\n\r\nAGTransport.prototype.serializeObject = function (object) {\r\n  let str;\r\n  try {\r\n    str = this.encode(object);\r\n  } catch (error) {\r\n    this._onError(error);\r\n    return null;\r\n  }\r\n  return str;\r\n};\r\n\r\nAGTransport.prototype.sendObject = function (object) {\r\n  if (this.isBufferingBatch) {\r\n    this._batchBuffer.push(object);\r\n    return;\r\n  }\r\n  let str = this.serializeObject(object);\r\n  if (str != null) {\r\n    this.send(str);\r\n  }\r\n};\r\n\r\nmodule.exports = AGTransport;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}