{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryan\\\\Desktop\\\\Projects\\\\my-app\\\\src\\\\index.tsx\";\nimport \"./overwolf.dev.mock\";\nimport store from \"app/shared/store\";\nimport i18next from \"i18next\";\nimport { resources } from \"locales\";\nimport { createRoot } from \"react-dom/client\";\nimport { initReactI18next } from \"react-i18next\";\nimport { Provider } from \"react-redux\";\nimport { App } from \"./app/components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nconst OverwolfApp = () => /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 3\n}, this);\n/*\n * before render app, get overwolf language\n * then load resources, default to en if not detected\n * @see  https://overwolf.github.io/docs/api/overwolf-settings-language\n */\n_c = OverwolfApp;\noverwolf.settings.language.get(_ref => {\n  let {\n    language\n  } = _ref;\n  i18next.use(initReactI18next).init({\n    resources,\n    lng: language,\n    fallbackLng: \"en\",\n    interpolation: {\n      escapeValue: false\n    }\n  }, () => {\n    root.render( /*#__PURE__*/_jsxDEV(OverwolfApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this));\n  });\n});\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// detect change overwolf language and set i18next language\n// then load resources\nconst changeLanguage = _ref2 => {\n  let {\n    language\n  } = _ref2;\n  return i18next.changeLanguage(language);\n};\noverwolf.settings.language.onLanguageChanged.removeListener(changeLanguage);\noverwolf.settings.language.onLanguageChanged.addListener(changeLanguage);\nvar _c;\n$RefreshReg$(_c, \"OverwolfApp\");","map":{"version":3,"names":["store","i18next","resources","createRoot","initReactI18next","Provider","App","reportWebVitals","jsxDEV","_jsxDEV","container","document","getElementById","root","OverwolfApp","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","overwolf","settings","language","get","_ref","use","init","lng","fallbackLng","interpolation","escapeValue","render","changeLanguage","_ref2","onLanguageChanged","removeListener","addListener","$RefreshReg$"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/index.tsx"],"sourcesContent":["import \"./overwolf.dev.mock\";\nimport store from \"app/shared/store\";\nimport i18next from \"i18next\";\nimport { resources } from \"locales\";\nimport { createRoot } from \"react-dom/client\";\nimport { initReactI18next } from \"react-i18next\";\nimport { Provider } from \"react-redux\";\nimport { App } from \"./app/components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\n\nconst OverwolfApp = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n/*\n * before render app, get overwolf language\n * then load resources, default to en if not detected\n * @see  https://overwolf.github.io/docs/api/overwolf-settings-language\n */\noverwolf.settings.language.get(({ language }) => {\n  i18next.use(initReactI18next).init(\n    {\n      resources,\n      lng: language,\n      fallbackLng: \"en\",\n      interpolation: {\n        escapeValue: false,\n      },\n    },\n    () => {\n      root.render(<OverwolfApp />);\n    },\n  );\n});\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// detect change overwolf language and set i18next language\n// then load resources\nconst changeLanguage = ({\n  language,\n}: overwolf.settings.language.LanguageChangedEvent) =>\n  i18next.changeLanguage(language);\n\noverwolf.settings.language.onLanguageChanged.removeListener(changeLanguage);\noverwolf.settings.language.onLanguageChanged.addListener(changeLanguage);\n"],"mappings":";AAAA,OAAO,qBAAqB;AAC5B,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,SAAS,QAAQ,SAAS;AACnC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,gBAAgB,QAAQ,eAAe;AAChD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACjD,MAAMC,IAAI,GAAGV,UAAU,CAACO,SAAU,CAAC;AAEnC,MAAMI,WAAW,GAAGA,CAAA,kBAClBL,OAAA,CAACJ,QAAQ;EAACL,KAAK,EAAEA,KAAM;EAAAe,QAAA,eACrBN,OAAA,CAACH,GAAG;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACX;AACD;AACA;AACA;AACA;AACA;AAJAC,EAAA,GALMN,WAAW;AAUjBO,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAACC,IAAA,IAAkB;EAAA,IAAjB;IAAEF;EAAS,CAAC,GAAAE,IAAA;EAC1CxB,OAAO,CAACyB,GAAG,CAACtB,gBAAgB,CAAC,CAACuB,IAAI,CAChC;IACEzB,SAAS;IACT0B,GAAG,EAAEL,QAAQ;IACbM,WAAW,EAAE,IAAI;IACjBC,aAAa,EAAE;MACbC,WAAW,EAAE;IACf;EACF,CAAC,EACD,MAAM;IACJlB,IAAI,CAACmB,MAAM,eAACvB,OAAA,CAACK,WAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EAC9B,CACF,CAAC;AACH,CAAC,CAAC;AACF;AACA;AACA;AACAZ,eAAe,CAAC,CAAC;;AAEjB;AACA;AACA,MAAM0B,cAAc,GAAGC,KAAA;EAAA,IAAC;IACtBX;EAC+C,CAAC,GAAAW,KAAA;EAAA,OAChDjC,OAAO,CAACgC,cAAc,CAACV,QAAQ,CAAC;AAAA;AAElCF,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAACY,iBAAiB,CAACC,cAAc,CAACH,cAAc,CAAC;AAC3EZ,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAACY,iBAAiB,CAACE,WAAW,CAACJ,cAAc,CAAC;AAAC,IAAAb,EAAA;AAAAkB,YAAA,CAAAlB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}