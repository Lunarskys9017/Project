{"ast":null,"code":"import{WINDOW_NAMES}from\"app/shared/constants\";import reduxStore from\"app/shared/store\";class MockGepMethods{static addListener(callback){//callback();\n}static removeListener(callback){//callback();\n}}class MockCommonMethods{static addListener(callback){callback();}static removeListener(callback){callback();}static simpleRequestInterval(interval,callback){console.info(\"Callback interval \".concat(interval));callback({success:true});}}/**\n *\n * Overwolf Mock\n *\n * Progress:\n * benchmarking: 100%\n * windows: 10%\n * games: 70%,\n * utils: 10%\n */ //@ts-ignore\nconst overwolfMock={version:\"BROWSER DEV\",benchmarking:{onFpsInfoReady:MockCommonMethods,onHardwareInfoReady:MockCommonMethods,onProcessInfoReady:MockCommonMethods,requestFpsInfo:MockCommonMethods.simpleRequestInterval,requestHardwareInfo:MockCommonMethods.simpleRequestInterval,requestProcessInfo:MockCommonMethods.simpleRequestInterval,requestPermissions:callback=>{callback({success:true});},stopRequesting:()=>{}},//@ts-ignore\nsettings:{language:{get:callback=>{console.info(\"get language\");callback({language:\"en\",success:true});},onLanguageChanged:{addListener:callback=>{console.log(\"onLanguageChanged addListener\");callback({language:\"en\"});},removeListener:callback=>{callback({language:\"en\"});}}}},//@ts-ignore\nutils:{openUrlInDefaultBrowser:url=>{window.open(url);}},//@ts-ignore\nwindows:{getCurrentWindow(callback){callback({window:{name:WINDOW_NAMES.BACKGROUND},success:true});},//@ts-ignore\ngetMainWindow:()=>({reduxStore}),//@ts-ignore\nobtainDeclaredWindow(windowName,callback){callback({window:{name:windowName},success:true});},//@ts-ignore\nrestore(windowId,callback){console.info(\"Mock restore \");},//@ts-ignore\nmaximize(windowId,callback){console.info(\"Mock maximize\");},//@ts-ignore\nclose(windowId,callback){console.info(\"Mock close\");},//@ts-ignore\nminimize(windowId,callback){console.info(\"Mock minimize\");}},//@ts-ignore\ngames:{//@ts-ignore\nevents:{onInfoUpdates2:MockGepMethods,onNewEvents:MockGepMethods,onInfoUpdates:MockGepMethods,onError:MockGepMethods,setRequiredFeatures:(features,callback)=>{//@ts-ignore\ncallback({success:true,features});},getInfo:callback=>{callback();}},getLastRunningGameInfo:callback=>{callback({success:true});},getRunningGameInfo:callback=>{callback({});},onGameInfoUpdated:MockGepMethods,//@ts-ignore\ninputTracking:{onKeyDown:MockCommonMethods,onKeyUp:MockCommonMethods,onMouseDown:MockCommonMethods,onMouseUp:MockCommonMethods,getMousePosition:callback=>{callback({success:true,activity:{aTime:0,apm:0,iTime:0,keyboard:{keys:[],total:0},mouse:{dist:0,keys:0,total:0}}});},getActivityInformation:callback=>{callback({success:true,activity:{aTime:0,apm:0,iTime:0,keyboard:{keys:[],total:0},mouse:{dist:0,keys:0,total:0}}});},getEyeTrackingInformation:callback=>{callback({success:true,activity:{aTime:0,apm:0,iTime:0,keyboard:{keys:[],total:0},mouse:{dist:0,keys:0,total:0}}});},pauseEyeTracking:()=>{},resumeEyeTracking:()=>{}}}};export default process.env.NODE_ENV!==\"production\"&&Object.defineProperty(window,\"overwolf\",{writable:true,value:overwolfMock});","map":{"version":3,"names":["WINDOW_NAMES","reduxStore","MockGepMethods","addListener","callback","removeListener","MockCommonMethods","simpleRequestInterval","interval","console","info","concat","success","overwolfMock","version","benchmarking","onFpsInfoReady","onHardwareInfoReady","onProcessInfoReady","requestFpsInfo","requestHardwareInfo","requestProcessInfo","requestPermissions","stopRequesting","settings","language","get","onLanguageChanged","log","utils","openUrlInDefaultBrowser","url","window","open","windows","getCurrentWindow","name","BACKGROUND","getMainWindow","obtainDeclaredWindow","windowName","restore","windowId","maximize","close","minimize","games","events","onInfoUpdates2","onNewEvents","onInfoUpdates","onError","setRequiredFeatures","features","getInfo","getLastRunningGameInfo","getRunningGameInfo","onGameInfoUpdated","inputTracking","onKeyDown","onKeyUp","onMouseDown","onMouseUp","getMousePosition","activity","aTime","apm","iTime","keyboard","keys","total","mouse","dist","getActivityInformation","getEyeTrackingInformation","pauseEyeTracking","resumeEyeTracking","process","env","NODE_ENV","Object","defineProperty","writable","value"],"sources":["C:/Users/bryan/Desktop/Mob/Projects Backup/Projects/my-app/src/overwolf.dev.mock.ts"],"sourcesContent":["import { WINDOW_NAMES } from \"app/shared/constants\";\nimport reduxStore from \"app/shared/store\";\n\nclass MockGepMethods {\n  static addListener(callback: (payload?: any) => void): void {\n    //callback();\n  }\n  static removeListener(callback: (payload?: any) => void): void {\n    //callback();\n  }\n}\nclass MockCommonMethods {\n  static addListener(callback: (payload?: any) => void): void {\n    callback();\n  }\n  static removeListener(callback: (payload?: any) => void): void {\n    callback();\n  }\n  static simpleRequestInterval(\n    interval: number,\n    callback: overwolf.CallbackFunction<overwolf.Result>,\n  ): void {\n    console.info(`Callback interval ${interval}`);\n    callback({ success: true });\n  }\n}\n/**\n *\n * Overwolf Mock\n *\n * Progress:\n * benchmarking: 100%\n * windows: 10%\n * games: 70%,\n * utils: 10%\n */\n\n//@ts-ignore\nconst overwolfMock: typeof overwolf = {\n  version: \"BROWSER DEV\",\n  benchmarking: {\n    onFpsInfoReady: MockCommonMethods,\n    onHardwareInfoReady: MockCommonMethods,\n    onProcessInfoReady: MockCommonMethods,\n    requestFpsInfo: MockCommonMethods.simpleRequestInterval,\n    requestHardwareInfo: MockCommonMethods.simpleRequestInterval,\n    requestProcessInfo: MockCommonMethods.simpleRequestInterval,\n    requestPermissions: (\n      callback: overwolf.CallbackFunction<overwolf.Result>,\n    ) => {\n      callback({ success: true });\n    },\n    stopRequesting: () => {},\n  },\n  //@ts-ignore\n  settings: {\n    language: {\n      get: (\n        callback: (\n          result: overwolf.settings.language.GetLanguageResult,\n        ) => void,\n      ) => {\n        console.info(\"get language\");\n        callback({ language: \"en\", success: true });\n      },\n      onLanguageChanged: {\n        addListener: (\n          callback: (\n            payload: overwolf.settings.language.LanguageChangedEvent,\n          ) => void,\n        ) => {\n          console.log(\"onLanguageChanged addListener\");\n          callback({ language: \"en\" });\n        },\n        removeListener: (\n          callback: (\n            payload: overwolf.settings.language.LanguageChangedEvent,\n          ) => void,\n        ) => {\n          callback({ language: \"en\" });\n        },\n      },\n    },\n  },\n  //@ts-ignore\n  utils: {\n    openUrlInDefaultBrowser: (url: string) => {\n      window.open(url);\n    },\n  },\n  //@ts-ignore\n  windows: {\n    getCurrentWindow(callback: (result: any) => void): void {\n      callback({ window: { name: WINDOW_NAMES.BACKGROUND }, success: true });\n    },\n    //@ts-ignore\n    getMainWindow: () => ({ reduxStore }),\n    //@ts-ignore\n    obtainDeclaredWindow(\n      windowName: string,\n      callback: (response: any) => void,\n    ): void {\n      callback({ window: { name: windowName }, success: true });\n    },\n    //@ts-ignore\n    restore(windowId: string, callback: (result: any) => void): void {\n      console.info(\"Mock restore \");\n    },\n    //@ts-ignore\n    maximize(windowId: string, callback: (result: any) => void): void {\n      console.info(\"Mock maximize\");\n    },\n    //@ts-ignore\n    close(windowId: string, callback: () => void): void {\n      console.info(\"Mock close\");\n    }, //@ts-ignore\n    minimize(windowId: string, callback: (result: any) => void): void {\n      console.info(\"Mock minimize\");\n    },\n  },\n  //@ts-ignore\n  games: {\n    //@ts-ignore\n    events: {\n      onInfoUpdates2: MockGepMethods,\n      onNewEvents: MockGepMethods,\n      onInfoUpdates: MockGepMethods,\n      onError: MockGepMethods,\n      setRequiredFeatures: (features, callback) => {\n        //@ts-ignore\n        callback({ success: true, features });\n      },\n      getInfo: (callback: (payload?: any) => void) => {\n        callback();\n      },\n    },\n    getLastRunningGameInfo: (callback) => {\n      callback({\n        success: true,\n      });\n    },\n    getRunningGameInfo: (callback) => {\n      callback({} as any);\n    },\n    onGameInfoUpdated: MockGepMethods,\n    //@ts-ignore\n    inputTracking: {\n      onKeyDown: MockCommonMethods,\n      onKeyUp: MockCommonMethods,\n      onMouseDown: MockCommonMethods,\n      onMouseUp: MockCommonMethods,\n      getMousePosition: (\n        callback: overwolf.CallbackFunction<overwolf.games.inputTracking.GetActivityResult>,\n      ) => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: 0,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0,\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0,\n            },\n          },\n        });\n      },\n      getActivityInformation: (\n        callback: overwolf.CallbackFunction<overwolf.games.inputTracking.GetActivityResult>,\n      ) => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: 0,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0,\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0,\n            },\n          },\n        });\n      },\n      getEyeTrackingInformation: (\n        callback: overwolf.CallbackFunction<overwolf.games.inputTracking.GetActivityResult>,\n      ) => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: 0,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0,\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0,\n            },\n          },\n        });\n      },\n      pauseEyeTracking: () => {},\n      resumeEyeTracking: () => {},\n    },\n  },\n};\n\nexport default process.env.NODE_ENV !== \"production\" &&\n  Object.defineProperty(window, \"overwolf\", {\n    writable: true,\n    value: overwolfMock,\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}