{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryan\\\\Desktop\\\\Projects\\\\my-app\\\\src\\\\screens\\\\desktop\\\\components\\\\Screen.tsx\",\n  _s = $RefreshSig$();\nimport { useTranslation } from \"react-i18next\";\nimport { DesktopHeader } from \"./DesktopHeader\";\nimport { useAdRemoval } from \"features/monetization\";\nimport \"./styles/Screen.css\";\nimport { Tabs } from \"antd\";\nimport { useState } from \"react\";\n\n//avoid the use of static text, use i18n instead, each language has its own text, and the text is stored in the\n//locales folder in the project root\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar TabsTypes;\n(function (TabsTypes) {\n  TabsTypes[\"BetPlacement\"] = \"BetPlacement\";\n  TabsTypes[\"Analytics\"] = \"Analytics\";\n})(TabsTypes || (TabsTypes = {}));\n;\nconst Screen = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [Bets, setBets] = useState([]);\n  const [selectedTab, setSelectedTab] = useState(TabsTypes.BetPlacement);\n  const onChangeTab = tabKey => {\n    setSelectedTab(tabKey);\n  };\n  const items = [{\n    key: TabsTypes.BetPlacement,\n    label: 'Bets',\n    children: 'Bets content'\n  }, {\n    key: TabsTypes.Analytics,\n    label: 'Analytics',\n    children: 'Analytics content'\n  }];\n  const {\n    isLoading,\n    isSubscribed\n  } = useAdRemoval();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"desktop\",\n    children: [/*#__PURE__*/_jsxDEV(DesktopHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"desktop__container\",\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        activeKey: selectedTab,\n        size: \"middle\",\n        items: items,\n        onChange: onChangeTab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Screen, \"QVwrI6o5HBV9SCbjRoGWxbCthjg=\", false, function () {\n  return [useTranslation, useAdRemoval];\n});\n_c = Screen;\nexport default Screen;\nvar _c;\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"names":["useTranslation","DesktopHeader","useAdRemoval","Tabs","useState","jsxDEV","_jsxDEV","TabsTypes","Screen","_s","t","Bets","setBets","selectedTab","setSelectedTab","BetPlacement","onChangeTab","tabKey","items","key","label","children","Analytics","isLoading","isSubscribed","className","fileName","_jsxFileName","lineNumber","columnNumber","activeKey","size","onChange","_c","$RefreshReg$"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/screens/desktop/components/Screen.tsx"],"sourcesContent":["import { Title } from \"components/Title/Title\";\nimport { useTranslation } from \"react-i18next\";\nimport { DesktopHeader } from \"./DesktopHeader\";\nimport { Overview } from \"features/overview\";\nimport { useAdRemoval } from \"features/monetization\";\nimport \"./styles/Screen.css\";\nimport { PremiumContent } from \"./PremiumContent\";\nimport { FreeContent } from \"./FreeContent\";\nimport { Tabs } from \"antd\";\nimport { useState } from \"react\";\n\n//avoid the use of static text, use i18n instead, each language has its own text, and the text is stored in the\n//locales folder in the project root\n\ntype Bet = {\n  Time: Date,\n  UserPlace: Number,\n  RequestedPlace: Number,\n}\n\nenum TabsTypes {\n  BetPlacement = 'BetPlacement',\n  Analytics = 'Analytics'\n};\n\nconst Screen = () => {\n  const { t } = useTranslation();\n  const [Bets, setBets] = useState<Bet[]>([])\n  const [selectedTab, setSelectedTab] = useState<TabsTypes>(TabsTypes.BetPlacement);\n\n  const onChangeTab = (tabKey: string) => {\n    setSelectedTab(tabKey as TabsTypes);\n  };\n  const items = [\n    {\n      key: TabsTypes.BetPlacement,\n      label: 'Bets',\n      children: 'Bets content',\n    },\n    {\n      key: TabsTypes.Analytics,\n      label: 'Analytics',\n      children: 'Analytics content',\n    }\n  ];\n  const { isLoading, isSubscribed } = useAdRemoval();\n\n  return (\n    <div className='desktop'>\n      <DesktopHeader />\n      <div className={\"desktop__container\"}>\n      <Tabs activeKey={selectedTab} size='middle' items={items} onChange={onChangeTab} />\n      </div>\n    </div>\n  );\n};\n\nexport default Screen;\n"],"mappings":";;AACA,SAASA,cAAc,QAAQ,eAAe;AAC9C,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAO,qBAAqB;AAG5B,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,IAQKC,SAAS;AAAA,WAATA,SAAS;EAATA,SAAS;EAATA,SAAS;AAAA,GAATA,SAAS,KAATA,SAAS;AAGb;AAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAE,CAAC,GAAGV,cAAc,CAAC,CAAC;EAC9B,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAQ,EAAE,CAAC;EAC3C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAYG,SAAS,CAACQ,YAAY,CAAC;EAEjF,MAAMC,WAAW,GAAIC,MAAc,IAAK;IACtCH,cAAc,CAACG,MAAmB,CAAC;EACrC,CAAC;EACD,MAAMC,KAAK,GAAG,CACZ;IACEC,GAAG,EAAEZ,SAAS,CAACQ,YAAY;IAC3BK,KAAK,EAAE,MAAM;IACbC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEF,GAAG,EAAEZ,SAAS,CAACe,SAAS;IACxBF,KAAK,EAAE,WAAW;IAClBC,QAAQ,EAAE;EACZ,CAAC,CACF;EACD,MAAM;IAAEE,SAAS;IAAEC;EAAa,CAAC,GAAGtB,YAAY,CAAC,CAAC;EAElD,oBACEI,OAAA;IAAKmB,SAAS,EAAC,SAAS;IAAAJ,QAAA,gBACtBf,OAAA,CAACL,aAAa;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjBvB,OAAA;MAAKmB,SAAS,EAAE,oBAAqB;MAAAJ,QAAA,eACrCf,OAAA,CAACH,IAAI;QAAC2B,SAAS,EAAEjB,WAAY;QAACkB,IAAI,EAAC,QAAQ;QAACb,KAAK,EAAEA,KAAM;QAACc,QAAQ,EAAEhB;MAAY;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpB,EAAA,CA9BID,MAAM;EAAA,QACIR,cAAc,EAmBQE,YAAY;AAAA;AAAA+B,EAAA,GApB5CzB,MAAM;AAgCZ,eAAeA,MAAM;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}