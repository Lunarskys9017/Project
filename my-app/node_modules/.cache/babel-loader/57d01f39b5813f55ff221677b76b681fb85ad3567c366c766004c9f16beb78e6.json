{"ast":null,"code":"import { WINDOW_NAMES } from \"app/shared/constants\";\nimport reduxStore from \"app/shared/store\";\nclass MockGepMethods {\n  static addListener(callback) {\n    //callback();\n  }\n  static removeListener(callback) {\n    //callback();\n  }\n}\nclass MockCommonMethods {\n  static addListener(callback) {\n    callback();\n  }\n  static removeListener(callback) {\n    callback();\n  }\n  static simpleRequestInterval(interval, callback) {\n    console.info(`Callback interval ${interval}`);\n    callback({\n      success: true\n    });\n  }\n}\n/**\n *\n * Overwolf Mock\n *\n * Progress:\n * benchmarking: 100%\n * windows: 10%\n * games: 70%,\n * utils: 10%\n */\n\n//@ts-ignore\nconst overwolfMock = {\n  version: \"BROWSER DEV\",\n  benchmarking: {\n    onFpsInfoReady: MockCommonMethods,\n    onHardwareInfoReady: MockCommonMethods,\n    onProcessInfoReady: MockCommonMethods,\n    requestFpsInfo: MockCommonMethods.simpleRequestInterval,\n    requestHardwareInfo: MockCommonMethods.simpleRequestInterval,\n    requestProcessInfo: MockCommonMethods.simpleRequestInterval,\n    requestPermissions: callback => {\n      callback({\n        success: true\n      });\n    },\n    stopRequesting: () => {}\n  },\n  //@ts-ignore\n  settings: {\n    language: {\n      get: callback => {\n        console.info(\"get language\");\n        callback({\n          language: \"en\",\n          success: true\n        });\n      },\n      onLanguageChanged: {\n        addListener: callback => {\n          console.log(\"onLanguageChanged addListener\");\n          callback({\n            language: \"en\"\n          });\n        },\n        removeListener: callback => {\n          callback({\n            language: \"en\"\n          });\n        }\n      }\n    }\n  },\n  //@ts-ignore\n  utils: {\n    openUrlInDefaultBrowser: url => {\n      window.open(url);\n    }\n  },\n  //@ts-ignore\n  windows: {\n    getCurrentWindow(callback) {\n      callback({\n        window: {\n          name: WINDOW_NAMES.BACKGROUND\n        },\n        success: true\n      });\n    },\n    //@ts-ignore\n    getMainWindow: () => ({\n      reduxStore\n    }),\n    //@ts-ignore\n    obtainDeclaredWindow(windowName, callback) {\n      callback({\n        window: {\n          name: windowName\n        },\n        success: true\n      });\n    },\n    //@ts-ignore\n    restore(windowId, callback) {\n      console.info(\"Mock restore \");\n    },\n    //@ts-ignore\n    maximize(windowId, callback) {\n      console.info(\"Mock maximize\");\n    },\n    //@ts-ignore\n    close(windowId, callback) {\n      console.info(\"Mock close\");\n    },\n    //@ts-ignore\n    minimize(windowId, callback) {\n      console.info(\"Mock minimize\");\n    }\n  },\n  //@ts-ignore\n  games: {\n    //@ts-ignore\n    events: {\n      onInfoUpdates2: MockGepMethods,\n      onNewEvents: MockGepMethods,\n      onInfoUpdates: MockGepMethods,\n      onError: MockGepMethods,\n      setRequiredFeatures: (features, callback) => {\n        //@ts-ignore\n        callback({\n          success: true,\n          features\n        });\n      },\n      getInfo: callback => {\n        callback();\n      }\n    },\n    getLastRunningGameInfo: callback => {\n      callback({\n        success: true\n      });\n    },\n    getRunningGameInfo: callback => {\n      callback({});\n    },\n    onGameInfoUpdated: MockGepMethods,\n    //@ts-ignore\n    inputTracking: {\n      onKeyDown: MockCommonMethods,\n      onKeyUp: MockCommonMethods,\n      onMouseDown: MockCommonMethods,\n      onMouseUp: MockCommonMethods,\n      getMousePosition: callback => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: false,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0\n            }\n          }\n        });\n      },\n      getActivityInformation: callback => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: false,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0\n            }\n          }\n        });\n      },\n      getEyeTrackingInformation: callback => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: false,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0\n            }\n          }\n        });\n      },\n      pauseEyeTracking: () => {},\n      resumeEyeTracking: () => {}\n    }\n  }\n};\nexport default process.env.NODE_ENV !== \"production\" && Object.defineProperty(window, \"overwolf\", {\n  writable: true,\n  value: overwolfMock\n});","map":{"version":3,"names":["WINDOW_NAMES","reduxStore","MockGepMethods","addListener","callback","removeListener","MockCommonMethods","simpleRequestInterval","interval","console","info","success","overwolfMock","version","benchmarking","onFpsInfoReady","onHardwareInfoReady","onProcessInfoReady","requestFpsInfo","requestHardwareInfo","requestProcessInfo","requestPermissions","stopRequesting","settings","language","get","onLanguageChanged","log","utils","openUrlInDefaultBrowser","url","window","open","windows","getCurrentWindow","name","BACKGROUND","getMainWindow","obtainDeclaredWindow","windowName","restore","windowId","maximize","close","minimize","games","events","onInfoUpdates2","onNewEvents","onInfoUpdates","onError","setRequiredFeatures","features","getInfo","getLastRunningGameInfo","getRunningGameInfo","onGameInfoUpdated","inputTracking","onKeyDown","onKeyUp","onMouseDown","onMouseUp","getMousePosition","activity","aTime","apm","iTime","keyboard","keys","total","mouse","dist","getActivityInformation","getEyeTrackingInformation","pauseEyeTracking","resumeEyeTracking","process","env","NODE_ENV","Object","defineProperty","writable","value"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/overwolf.dev.mock.ts"],"sourcesContent":["import { WINDOW_NAMES } from \"app/shared/constants\";\nimport reduxStore from \"app/shared/store\";\n\nclass MockGepMethods {\n  static addListener(callback: (payload?: any) => void): void {\n    //callback();\n  }\n  static removeListener(callback: (payload?: any) => void): void {\n    //callback();\n  }\n}\nclass MockCommonMethods {\n  static addListener(callback: (payload?: any) => void): void {\n    callback();\n  }\n  static removeListener(callback: (payload?: any) => void): void {\n    callback();\n  }\n  static simpleRequestInterval(\n    interval: number,\n    callback: overwolf.CallbackFunction<overwolf.Result>,\n  ): void {\n    console.info(`Callback interval ${interval}`);\n    callback({ success: true });\n  }\n}\n/**\n *\n * Overwolf Mock\n *\n * Progress:\n * benchmarking: 100%\n * windows: 10%\n * games: 70%,\n * utils: 10%\n */\n\n//@ts-ignore\nconst overwolfMock: typeof overwolf = {\n  version: \"BROWSER DEV\",\n  benchmarking: {\n    onFpsInfoReady: MockCommonMethods,\n    onHardwareInfoReady: MockCommonMethods,\n    onProcessInfoReady: MockCommonMethods,\n    requestFpsInfo: MockCommonMethods.simpleRequestInterval,\n    requestHardwareInfo: MockCommonMethods.simpleRequestInterval,\n    requestProcessInfo: MockCommonMethods.simpleRequestInterval,\n    requestPermissions: (\n      callback: overwolf.CallbackFunction<overwolf.Result>,\n    ) => {\n      callback({ success: true });\n    },\n    stopRequesting: () => {},\n  },\n  //@ts-ignore\n  settings: {\n    language: {\n      get: (\n        callback: (\n          result: overwolf.settings.language.GetLanguageResult,\n        ) => void,\n      ) => {\n        console.info(\"get language\");\n        callback({ language: \"en\", success: true });\n      },\n      onLanguageChanged: {\n        addListener: (\n          callback: (\n            payload: overwolf.settings.language.LanguageChangedEvent,\n          ) => void,\n        ) => {\n          console.log(\"onLanguageChanged addListener\");\n          callback({ language: \"en\" });\n        },\n        removeListener: (\n          callback: (\n            payload: overwolf.settings.language.LanguageChangedEvent,\n          ) => void,\n        ) => {\n          callback({ language: \"en\" });\n        },\n      },\n    },\n  },\n  //@ts-ignore\n  utils: {\n    openUrlInDefaultBrowser: (url: string) => {\n      window.open(url);\n    },\n  },\n  //@ts-ignore\n  windows: {\n    getCurrentWindow(callback: (result: any) => void): void {\n      callback({ window: { name: WINDOW_NAMES.BACKGROUND }, success: true });\n    },\n    //@ts-ignore\n    getMainWindow: () => ({ reduxStore }),\n    //@ts-ignore\n    obtainDeclaredWindow(\n      windowName: string,\n      callback: (response: any) => void,\n    ): void {\n      callback({ window: { name: windowName }, success: true });\n    },\n    //@ts-ignore\n    restore(windowId: string, callback: (result: any) => void): void {\n      console.info(\"Mock restore \");\n    },\n    //@ts-ignore\n    maximize(windowId: string, callback: (result: any) => void): void {\n      console.info(\"Mock maximize\");\n    },\n    //@ts-ignore\n    close(windowId: string, callback: () => void): void {\n      console.info(\"Mock close\");\n    }, //@ts-ignore\n    minimize(windowId: string, callback: (result: any) => void): void {\n      console.info(\"Mock minimize\");\n    },\n  },\n  //@ts-ignore\n  games: {\n    //@ts-ignore\n    events: {\n      onInfoUpdates2: MockGepMethods,\n      onNewEvents: MockGepMethods,\n      onInfoUpdates: MockGepMethods,\n      onError: MockGepMethods,\n      setRequiredFeatures: (features, callback) => {\n        //@ts-ignore\n        callback({ success: true, features });\n      },\n      getInfo: (callback: (payload?: any) => void) => {\n        callback();\n      },\n    },\n    getLastRunningGameInfo: (callback) => {\n      callback({\n        success: true,\n      });\n    },\n    getRunningGameInfo: (callback) => {\n      callback({} as any);\n    },\n    onGameInfoUpdated: MockGepMethods,\n    //@ts-ignore\n    inputTracking: {\n      onKeyDown: MockCommonMethods,\n      onKeyUp: MockCommonMethods,\n      onMouseDown: MockCommonMethods,\n      onMouseUp: MockCommonMethods,\n      getMousePosition: (\n        callback: overwolf.CallbackFunction<overwolf.games.inputTracking.GetActivityResult>,\n      ) => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: false,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0,\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0,\n            },\n          },\n        });\n      },\n      getActivityInformation: (\n        callback: overwolf.CallbackFunction<overwolf.games.inputTracking.GetActivityResult>,\n      ) => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: false,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0,\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0,\n            },\n          },\n        });\n      },\n      getEyeTrackingInformation: (\n        callback: overwolf.CallbackFunction<overwolf.games.inputTracking.GetActivityResult>,\n      ) => {\n        callback({\n          success: true,\n          activity: {\n            aTime: 0,\n            apm: false,\n            iTime: 0,\n            keyboard: {\n              keys: [],\n              total: 0,\n            },\n            mouse: {\n              dist: 0,\n              keys: 0,\n              total: 0,\n            },\n          },\n        });\n      },\n      pauseEyeTracking: () => {},\n      resumeEyeTracking: () => {},\n    },\n  },\n};\n\nexport default process.env.NODE_ENV !== \"production\" &&\n  Object.defineProperty(window, \"overwolf\", {\n    writable: true,\n    value: overwolfMock,\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}