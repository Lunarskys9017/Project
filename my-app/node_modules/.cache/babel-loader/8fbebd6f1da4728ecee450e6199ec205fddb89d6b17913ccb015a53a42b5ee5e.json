{"ast":null,"code":"import { mark, extract, refer } from '../helpers';\nimport options from '../constants/options';\nexport default function serialize(immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {\n      const immutableValue = value;\n      switch (immutableValue.__serializedType__) {\n        case 'ImmutableMap':\n          return immutable.Map(immutableValue.data);\n        case 'ImmutableOrderedMap':\n          return immutable.OrderedMap(immutableValue.data);\n        case 'ImmutableList':\n          return immutable.List(immutableValue.data);\n        case 'ImmutableRange':\n          return immutable.Range(immutableValue.data._start, immutableValue.data._end, immutableValue.data._step);\n        case 'ImmutableRepeat':\n          return immutable.Repeat(immutableValue.data._value, immutableValue.data.size);\n        case 'ImmutableSet':\n          return immutable.Set(immutableValue.data);\n        case 'ImmutableOrderedSet':\n          return immutable.OrderedSet(immutableValue.data);\n        case 'ImmutableSeq':\n          return immutable.Seq(immutableValue.data);\n        case 'ImmutableStack':\n          return immutable.Stack(immutableValue.data);\n        case 'ImmutableRecord':\n          return refs && refs[immutableValue.__serializedRef__] ? new refs[immutableValue.__serializedRef__](immutableValue.data) : immutable.Map(immutableValue.data);\n        default:\n          return immutableValue.data;\n      }\n    }\n    return value;\n  }\n  return {\n    replacer: customReplacer ? function (key, value) {\n      return customReplacer(key, value, replacer);\n    } : replacer,\n    reviver: customReviver ? function (key, value) {\n      return customReviver(key, value, reviver);\n    } : reviver,\n    options: options\n  };\n}","map":{"version":3,"names":["mark","extract","refer","options","serialize","immutable","refs","customReplacer","customReviver","replacer","key","value","Record","Range","Repeat","OrderedMap","isOrderedMap","Map","isMap","List","isList","OrderedSet","isOrderedSet","Set","isSet","Seq","isSeq","Stack","isStack","reviver","immutableValue","__serializedType__","data","_start","_end","_step","_value","size","__serializedRef__"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/node_modules/@redux-devtools/serialize/lib/esm/immutable/serialize.js"],"sourcesContent":["import { mark, extract, refer } from '../helpers';\nimport options from '../constants/options';\nexport default function serialize(immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {\n      const immutableValue = value;\n      switch (immutableValue.__serializedType__) {\n        case 'ImmutableMap':\n          return immutable.Map(immutableValue.data);\n        case 'ImmutableOrderedMap':\n          return immutable.OrderedMap(immutableValue.data);\n        case 'ImmutableList':\n          return immutable.List(immutableValue.data);\n        case 'ImmutableRange':\n          return immutable.Range(immutableValue.data._start, immutableValue.data._end, immutableValue.data._step);\n        case 'ImmutableRepeat':\n          return immutable.Repeat(immutableValue.data._value, immutableValue.data.size);\n        case 'ImmutableSet':\n          return immutable.Set(immutableValue.data);\n        case 'ImmutableOrderedSet':\n          return immutable.OrderedSet(immutableValue.data);\n        case 'ImmutableSeq':\n          return immutable.Seq(immutableValue.data);\n        case 'ImmutableStack':\n          return immutable.Stack(immutableValue.data);\n        case 'ImmutableRecord':\n          return refs && refs[immutableValue.__serializedRef__] ? new refs[immutableValue.__serializedRef__](immutableValue.data) : immutable.Map(immutableValue.data);\n        default:\n          return immutableValue.data;\n      }\n    }\n    return value;\n  }\n  return {\n    replacer: customReplacer ? function (key, value) {\n      return customReplacer(key, value, replacer);\n    } : replacer,\n    reviver: customReviver ? function (key, value) {\n      return customReviver(key, value, reviver);\n    } : reviver,\n    options: options\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}