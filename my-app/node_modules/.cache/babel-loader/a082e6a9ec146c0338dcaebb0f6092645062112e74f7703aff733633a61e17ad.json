{"ast":null,"code":"import{WINDOW_NAMES}from\"app/shared/constants\";import{isDev}from\"./utils\";import{log}from\"./log\";async function obtainDeclaredWindow(windowName){return new Promise((resolve,reject)=>{overwolf.windows.obtainDeclaredWindow(windowName,result=>{if(result.success){resolve(result.window);}else{reject(result.error);}});});}async function getCurrentWindow(){if(isDev){log(\"Running in dev mode, returning \".concat(WINDOW_NAMES.DESKTOP,\" window, you can change this in src/lib/overwolf-essentials.ts: getCurrent\"),\"src/lib/overwolf-essentials.ts\",\"getCurrentWindow\");return Promise.resolve(WINDOW_NAMES.DESKTOP);}return new Promise((resolve,reject)=>{overwolf.windows.getCurrentWindow(result=>{if(result.success){resolve(result.window.name);}else{reject(result.error);}});});}function getMonitorsList(){return new Promise(resolve=>{overwolf.utils.getMonitorsList(result=>{resolve(result.displays);});});}export{obtainDeclaredWindow,getMonitorsList,getCurrentWindow};","map":{"version":3,"names":["WINDOW_NAMES","isDev","log","obtainDeclaredWindow","windowName","Promise","resolve","reject","overwolf","windows","result","success","window","error","getCurrentWindow","concat","DESKTOP","name","getMonitorsList","utils","displays"],"sources":["C:/Users/bryan/Desktop/Projects/my-app/src/lib/overwolf-essentials.ts"],"sourcesContent":["import { WINDOW_NAMES } from \"app/shared/constants\";\nimport { isDev } from \"./utils\";\nimport { log } from \"./log\";\n\nasync function obtainDeclaredWindow(\n  windowName: string,\n): Promise<overwolf.windows.WindowInfo> {\n  return new Promise((resolve, reject) => {\n    overwolf.windows.obtainDeclaredWindow(windowName, (result) => {\n      if (result.success) {\n        resolve(result.window);\n      } else {\n        reject(result.error);\n      }\n    });\n  });\n}\n\nasync function getCurrentWindow() {\n  if (isDev) {\n    log(\n      `Running in dev mode, returning ${WINDOW_NAMES.DESKTOP} window, you can change this in src/lib/overwolf-essentials.ts: getCurrent`,\n      \"src/lib/overwolf-essentials.ts\",\n      \"getCurrentWindow\",\n    );\n    return Promise.resolve(WINDOW_NAMES.DESKTOP);\n  }\n  return new Promise<string>((resolve, reject) => {\n    overwolf.windows.getCurrentWindow((result) => {\n      if (result.success) {\n        resolve(result.window.name);\n      } else {\n        reject(result.error);\n      }\n    });\n  });\n}\n\nfunction getMonitorsList(): Promise<overwolf.utils.Display[]> {\n  return new Promise<overwolf.utils.Display[]>((resolve) => {\n    overwolf.utils.getMonitorsList((result) => {\n      resolve(result.displays);\n    });\n  });\n}\n\nexport { obtainDeclaredWindow, getMonitorsList, getCurrentWindow };\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,sBAAsB,CACnD,OAASC,KAAK,KAAQ,SAAS,CAC/B,OAASC,GAAG,KAAQ,OAAO,CAE3B,cAAe,CAAAC,oBAAoBA,CACjCC,UAAkB,CACoB,CACtC,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCC,QAAQ,CAACC,OAAO,CAACN,oBAAoB,CAACC,UAAU,CAAGM,MAAM,EAAK,CAC5D,GAAIA,MAAM,CAACC,OAAO,CAAE,CAClBL,OAAO,CAACI,MAAM,CAACE,MAAM,CAAC,CACxB,CAAC,IAAM,CACLL,MAAM,CAACG,MAAM,CAACG,KAAK,CAAC,CACtB,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAEA,cAAe,CAAAC,gBAAgBA,CAAA,CAAG,CAChC,GAAIb,KAAK,CAAE,CACTC,GAAG,mCAAAa,MAAA,CACiCf,YAAY,CAACgB,OAAO,+EACtD,gCAAgC,CAChC,kBACF,CAAC,CACD,MAAO,CAAAX,OAAO,CAACC,OAAO,CAACN,YAAY,CAACgB,OAAO,CAAC,CAC9C,CACA,MAAO,IAAI,CAAAX,OAAO,CAAS,CAACC,OAAO,CAAEC,MAAM,GAAK,CAC9CC,QAAQ,CAACC,OAAO,CAACK,gBAAgB,CAAEJ,MAAM,EAAK,CAC5C,GAAIA,MAAM,CAACC,OAAO,CAAE,CAClBL,OAAO,CAACI,MAAM,CAACE,MAAM,CAACK,IAAI,CAAC,CAC7B,CAAC,IAAM,CACLV,MAAM,CAACG,MAAM,CAACG,KAAK,CAAC,CACtB,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAEA,QAAS,CAAAK,eAAeA,CAAA,CAAsC,CAC5D,MAAO,IAAI,CAAAb,OAAO,CAA4BC,OAAO,EAAK,CACxDE,QAAQ,CAACW,KAAK,CAACD,eAAe,CAAER,MAAM,EAAK,CACzCJ,OAAO,CAACI,MAAM,CAACU,QAAQ,CAAC,CAC1B,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAEA,OAASjB,oBAAoB,CAAEe,eAAe,CAAEJ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}