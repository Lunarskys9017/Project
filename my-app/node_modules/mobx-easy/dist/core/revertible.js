"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mobx_1 = require("mobx");
const utils_1 = require("../common/utils");
const ActionName = 'revert';
const ActionDisposerName = 'disposeRevertObserver';
const revertible = (propsToWatch) => {
    if (!propsToWatch || propsToWatch.length === 0) {
        throw new Error(`${utils_1.logPrefix} Please provide an array of properties to watch`);
    }
    return function (BaseClass) {
        const startWatch = (self) => {
            const prevState = new Map();
            const disposer = mobx_1.observe(self, change => {
                const { name, oldValue } = change;
                prevState.set(name, oldValue);
            });
            return {
                prevState,
                disposer
            };
        };
        const revert = (self, prevState) => {
            return mobx_1.action((key) => {
                if (!key) {
                    prevState.forEach((value, key) => {
                        self[key] = value;
                    });
                    prevState.clear();
                }
                else {
                    const oldValue = prevState.get(key);
                    self[key] = oldValue;
                    prevState.delete(key);
                }
            });
        };
        return class extends BaseClass {
            constructor(...args) {
                super(...args);
                const { prevState, disposer } = startWatch(this);
                this[ActionName] = revert(this, prevState);
                this[ActionDisposerName] = disposer;
            }
        };
    };
};
exports.revertible = revertible;
//# sourceMappingURL=revertible.js.map