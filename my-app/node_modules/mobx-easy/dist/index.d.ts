declare const wrapRoot: <R extends import("./core/wrap-root").IInit<RIP>, E, RCP, RIP>({ RootStore, env, wrapperName, assignIdsToClasses, rootStoreInitParams, rootStoreConstructorParams }: import("./core/wrap-root").WrapRootOptions<E, R, RCP, RIP>) => R;
declare const addEnvironment: <T extends import("./common/types").Constructor<{}>>(BaseClass: T) => {
    new (...args: any[]): {
        getEnv(): any;
    };
} & T;
declare const getEnv: <T>(wrapperName?: string | undefined) => T;
declare const addEnvironmentByName: (wrapperName: string) => <T extends import("./common/types").Constructor<{}>>(BaseClass: T) => {
    new (...args: any[]): {
        getEnv(): any;
    };
} & T;
declare const addRoot: <T extends import("./common/types").Constructor<{}>>(BaseClass: T) => {
    new (...args: any[]): {
        getRoot(): any;
    };
} & T;
declare const getRoot: <T>(wrapperName?: string | undefined) => T;
declare const removeRoot: (name?: string | undefined) => void;
declare const addRootByName: (wrapperName: string) => <T extends import("./common/types").Constructor<{}>>(BaseClass: T) => {
    new (...args: any[]): {
        getRoot(): any;
    };
} & T;
export { addActions } from "./core/add-actions";
export { addComputations } from "./core/add-computations";
export { setter } from "./core/setter";
export { revertible } from "./core/revertible";
export { allObservable } from './core/all-observable';
export { wrapRoot, addEnvironment, addEnvironmentByName, addRoot, addRootByName, getRoot, getEnv, removeRoot, };
