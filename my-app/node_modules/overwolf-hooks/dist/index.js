'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Overwolf = overwolf.games.events;
var REGISTER_RETRY_TIMEOUT = 10000;
var useGameEventProvider = function (_a) {
    var displayLog = _a.displayLog;
    var _b = react.useState(), info = _b[0], setInfo = _b[1];
    var _c = react.useState(), event = _c[0], setEvent = _c[1];
    var _d = react.useState([]), requiredFeatures = _d[0], setFeatures = _d[1];
    function handleGameEvent(_a) {
        var info = _a.info, events = _a.events;
        info && setInfo(info);
        events && setEvent(events);
    }
    var registerToGepCallback = react.useCallback(function (_a) {
        var success = _a.success, rest = __rest(_a, ["success"]);
        if (success) {
            Overwolf.onInfoUpdates2.removeListener(handleGameEvent);
            Overwolf.onNewEvents.removeListener(handleGameEvent);
            Overwolf.onInfoUpdates2.addListener(handleGameEvent);
            Overwolf.onNewEvents.addListener(handleGameEvent);
        }
        else
            setTimeout(function () {
                Overwolf.setRequiredFeatures(requiredFeatures, registerToGepCallback);
            }, REGISTER_RETRY_TIMEOUT);
        displayLog &&
            console.info('[🐺 overwolf-hooks][🧰 useGameEventProvider][🔧 registerToGepCallback]', JSON.stringify(__assign({ success: success }, rest), null, 2));
    }, [requiredFeatures]);
    var runGep = react.useCallback(function () {
        Overwolf.setRequiredFeatures(requiredFeatures, registerToGepCallback);
    }, [requiredFeatures, registerToGepCallback]);
    var setGameFeatures = react.useCallback(setFeatures, []);
    react.useEffect(function () {
        requiredFeatures.length && runGep();
        return function () {
            Overwolf.onInfoUpdates2.removeListener(handleGameEvent);
            Overwolf.onNewEvents.removeListener(handleGameEvent);
        };
    }, [runGep, requiredFeatures]);
    return [{ info: info, event: event }, setGameFeatures];
};

var useRunningGame = function (_a) {
    var displayLog = _a.displayLog;
    var _b = react.useState(null), game = _b[0], setGame = _b[1];
    function onGameInfoUpdated(payload) {
        var _a, _b, _c, _d;
        var gameRunning = {
            gameRunning: (_b = (_a = payload === null || payload === void 0 ? void 0 : payload.gameInfo) === null || _a === void 0 ? void 0 : _a.isRunning) !== null && _b !== void 0 ? _b : false,
            id: Math.round((((_c = payload === null || payload === void 0 ? void 0 : payload.gameInfo) === null || _c === void 0 ? void 0 : _c.id) || 0) / 10),
            title: ((_d = payload === null || payload === void 0 ? void 0 : payload.gameInfo) === null || _d === void 0 ? void 0 : _d.title) || '',
            gameChanged: (payload === null || payload === void 0 ? void 0 : payload.gameChanged) || false,
            isInFocus: (payload === null || payload === void 0 ? void 0 : payload.focusChanged) || false,
        };
        setGame(gameRunning);
        displayLog &&
            console.info('[🐺 overwolf-hooks][🧰 useRunningGame][🔧 onGameInfoUpdatedPayload]', JSON.stringify(gameRunning, null, 2));
    }
    function onGetRunningGameInfo(payload) {
        displayLog &&
            console.info('[🐺 overwolf-hooks][🧰 useRunningGame][🔧 onGetRunningGameInfo]', JSON.stringify(payload, null, 2));
        setGame(function (currentGame) {
            var _a, _b;
            return ({
                gameChanged: (currentGame === null || currentGame === void 0 ? void 0 : currentGame.gameChanged) || false,
                id: Math.round(((payload === null || payload === void 0 ? void 0 : payload.id) || 0) / 10),
                title: (payload === null || payload === void 0 ? void 0 : payload.title) || '',
                gameRunning: (_a = payload === null || payload === void 0 ? void 0 : payload.isRunning) !== null && _a !== void 0 ? _a : false,
                isInFocus: (_b = payload === null || payload === void 0 ? void 0 : payload.isInFocus) !== null && _b !== void 0 ? _b : false,
            });
        });
    }
    react.useEffect(function () {
        overwolf.games.getRunningGameInfo(onGetRunningGameInfo);
        overwolf.games.onGameInfoUpdated.removeListener(onGameInfoUpdated);
        overwolf.games.onGameInfoUpdated.addListener(onGameInfoUpdated);
        return function () {
            overwolf.games.onGameInfoUpdated.removeListener(onGameInfoUpdated);
        };
    }, []);
    return [game];
};

var obtainWindow = function (name) {
    return new Promise(function (resolve, reject) {
        overwolf.windows.obtainDeclaredWindow(name, function (response) {
            if (!response.success)
                reject(response);
            resolve(response.window);
        });
    });
};
var minimize = function (name) {
    return new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                overwolf.windows.minimize(name, function (result) {
                    if (result.success)
                        resolve();
                    else
                        reject(result);
                });
            }
            catch (e) {
                reject(e);
            }
            return [2 /*return*/];
        });
    }); });
};
var close = function (name) {
    return new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                overwolf.windows.close(name, function () {
                    resolve();
                });
            }
            catch (e) {
                reject(e);
            }
            return [2 /*return*/];
        });
    }); });
};
var maximize = function (name) {
    return new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                overwolf.windows.maximize(name, function (result) {
                    if (result.success)
                        resolve();
                    else
                        reject(result);
                });
            }
            catch (e) {
                reject(e);
            }
            return [2 /*return*/];
        });
    }); });
};
var restore = function (name) {
    return new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                overwolf.windows.restore(name, function (result) {
                    if (result.success)
                        resolve();
                    else
                        reject(result);
                });
            }
            catch (e) {
                reject(e);
            }
            return [2 /*return*/];
        });
    }); });
};
var useWindow = function (name, _a) {
    var displayLog = _a.displayLog;
    var _b = react.useState(), owDeclaredWindow = _b[0], setOwDeclaredWindow = _b[1];
    var _c = react.useState(), owWindow = _c[0], setOwWindow = _c[1];
    var obtainDeclaredWindow = react.useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        var delclaredWindow, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, obtainWindow(name)];
                case 1:
                    delclaredWindow = _a.sent();
                    displayLog &&
                        console.info("[🐺 overwolf-hooks][🧰 useWindow][🔧 obtainDeclaredWindow]", JSON.stringify(delclaredWindow, null, 2));
                    setOwDeclaredWindow(delclaredWindow);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    console.log({ error: error_1 });
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); }, [name]);
    react.useEffect(function () {
        if (owDeclaredWindow) {
            var id_1 = owDeclaredWindow.id, otherWindowProps = __rest(owDeclaredWindow, ["id"]);
            var createLog_1 = function (logAction) {
                if (logAction === void 0) { logAction = ""; }
                return displayLog &&
                    console.info("[\uD83D\uDC3A overwolf-hooks][\uD83E\uDDF0 useWindow][\uD83D\uDD27 ".concat(logAction, "]"), JSON.stringify(owDeclaredWindow, null, 2));
            };
            var windowActions = {
                id: id_1,
                minimize: function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, minimize(id_1)];
                            case 1:
                                _a.sent();
                                createLog_1("minimize");
                                return [2 /*return*/];
                        }
                    });
                }); },
                maximize: function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, maximize(id_1)];
                            case 1:
                                _a.sent();
                                createLog_1("maximize");
                                return [2 /*return*/];
                        }
                    });
                }); },
                restore: function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, restore(id_1)];
                            case 1:
                                _a.sent();
                                createLog_1("restore");
                                return [2 /*return*/];
                        }
                    });
                }); },
                close: function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, close(id_1)];
                            case 1:
                                _a.sent();
                                createLog_1("close");
                                return [2 /*return*/];
                        }
                    });
                }); },
            };
            setOwWindow(__assign(__assign({}, windowActions), otherWindowProps));
        }
    }, [owDeclaredWindow, displayLog]);
    react.useEffect(function () {
        obtainDeclaredWindow();
    }, [name]);
    return [owWindow];
};

var SIGNIFICANT_MOUSE_MOVE_THRESHOLD = 1;
var useDrag = function (currentWindowID, _a) {
    var displayLog = _a.displayLog;
    var _b = react.useState(currentWindowID), owWindow = _b[0], setOwWindow = _b[1];
    var _c = react.useState(null), initialMousePosition = _c[0], setMousePosition = _c[1];
    var _d = react.useState(false), isMouseDown = _d[0], setMouseDown = _d[1];
    function onDragStart(_a) {
        var clientX = _a.clientX, clientY = _a.clientY;
        setMouseDown(true);
        setMousePosition({
            x: clientX,
            y: clientY,
        });
    }
    function isSignificantMouseMove(_a) {
        var clientX = _a.clientX, clientY = _a.clientY;
        if (!initialMousePosition)
            return false;
        var diffX = Math.abs(clientX - initialMousePosition.x);
        var diffY = Math.abs(clientY - initialMousePosition.y);
        var isSignificant = diffX > SIGNIFICANT_MOUSE_MOVE_THRESHOLD ||
            diffY > SIGNIFICANT_MOUSE_MOVE_THRESHOLD;
        return isSignificant;
    }
    function onMouseMove(event) {
        if (!isMouseDown || !isSignificantMouseMove(event))
            return;
        setMouseDown(false);
        if (owWindow) {
            overwolf.windows.dragMove(owWindow);
            displayLog &&
                console.info('[🐺 overwolf-hooks][🧰 useDrag][🔧 onGameInfoUpdatedPayload] ', JSON.stringify({ clientX: event.clientX, clientY: event.clientY }, null, 2));
        }
    }
    var setCurrentWindowID = react.useCallback(function (id) {
        setOwWindow(id);
    }, []);
    return { setCurrentWindowID: setCurrentWindowID, onDragStart: onDragStart, onMouseMove: onMouseMove };
};

exports.useDrag = useDrag;
exports.useGameEventProvider = useGameEventProvider;
exports.useRunningGame = useRunningGame;
exports.useWindow = useWindow;
//# sourceMappingURL=index.js.map
